# Generated by Django 4.2.7 on 2025-07-15 21:22

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, unique=True, validators=[django.core.validators.MinLengthValidator(2)])),
                ('code', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Région',
                'verbose_name_plural': 'Régions',
                'ordering': ['nom'],
            },
        ),
        migrations.CreateModel(
            name='Prefecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prefectures', to='geography.region')),
            ],
            options={
                'verbose_name': 'Préfecture',
                'verbose_name_plural': 'Préfectures',
                'ordering': ['region', 'nom'],
                'unique_together': {('region', 'nom')},
            },
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('type', models.CharField(choices=[('urbaine', 'Commune Urbaine'), ('rurale', 'Commune Rurale')], default='rurale', max_length=10)),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('prefecture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communes', to='geography.prefecture')),
            ],
            options={
                'verbose_name': 'Commune',
                'verbose_name_plural': 'Communes',
                'ordering': ['prefecture', 'nom'],
                'unique_together': {('prefecture', 'nom')},
            },
        ),
        migrations.CreateModel(
            name='Quartier',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)])),
                ('code', models.CharField(blank=True, max_length=10, null=True)),
                ('population_estimee', models.PositiveIntegerField(blank=True, null=True)),
                ('superficie_km2', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('commune', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quartiers', to='geography.commune')),
            ],
            options={
                'verbose_name': 'Quartier',
                'verbose_name_plural': 'Quartiers',
                'ordering': ['commune', 'nom'],
                'unique_together': {('commune', 'nom')},
            },
        ),
    ]

# Generated by Django 4.2.7 on 2025-07-24 10:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('geography', '0001_initial'),
        ('users', '0003_userrelationship'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunityGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Nom du groupe')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('group_type', models.CharField(choices=[('neighborhood', 'Quartier'), ('community', 'Communauté'), ('sports', 'Sport'), ('education', 'Éducation'), ('business', 'Commerce'), ('culture', 'Culture'), ('health', 'Santé'), ('environment', 'Environnement'), ('youth', 'Jeunesse'), ('women', 'Femmes'), ('other', 'Autre')], default='community', max_length=20)),
                ('privacy_level', models.CharField(choices=[('public', 'Public'), ('private', 'Privé'), ('secret', 'Secret')], default='public', max_length=10)),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='groups/covers/', verbose_name='Image de couverture')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='groups/profiles/', verbose_name='Image de profil')),
                ('member_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de membres')),
                ('post_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de posts')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_active', models.BooleanField(default=True, verbose_name='Actif')),
                ('admins', models.ManyToManyField(blank=True, related_name='administered_groups', to=settings.AUTH_USER_MODEL, verbose_name='Administrateurs')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to=settings.AUTH_USER_MODEL, verbose_name='Créateur')),
                ('quartier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geography.quartier', verbose_name='Quartier')),
            ],
            options={
                'verbose_name': 'Groupe Communautaire',
                'verbose_name_plural': 'Groupes Communautaires',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserSocialScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_points', models.PositiveIntegerField(default=0, verbose_name='Points totaux')),
                ('level', models.PositiveIntegerField(default=1, verbose_name='Niveau')),
                ('achievements_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de réalisations')),
                ('posts_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de posts')),
                ('friends_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'amis")),
                ('groups_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de groupes')),
                ('events_count', models.PositiveIntegerField(default=0, verbose_name="Nombre d'événements")),
                ('likes_received', models.PositiveIntegerField(default=0, verbose_name='Likes reçus')),
                ('comments_received', models.PositiveIntegerField(default=0, verbose_name='Commentaires reçus')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Dernière mise à jour')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='social_score', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Score Social Utilisateur',
                'verbose_name_plural': 'Scores Sociaux Utilisateur',
            },
        ),
        migrations.CreateModel(
            name='CommunityEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('event_type', models.CharField(choices=[('meeting', 'Réunion'), ('celebration', 'Célébration'), ('sports', 'Sport'), ('education', 'Éducation'), ('business', 'Commerce'), ('culture', 'Culture'), ('health', 'Santé'), ('environment', 'Environnement'), ('youth', 'Jeunesse'), ('other', 'Autre')], default='meeting', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Brouillon'), ('published', 'Publié'), ('ongoing', 'En cours'), ('completed', 'Terminé'), ('cancelled', 'Annulé')], default='draft', max_length=20)),
                ('start_date', models.DateTimeField(verbose_name='Date et heure de début')),
                ('end_date', models.DateTimeField(verbose_name='Date et heure de fin')),
                ('location_details', models.CharField(blank=True, max_length=500, verbose_name='Détails du lieu')),
                ('cover_image', models.ImageField(blank=True, null=True, upload_to='events/covers/', verbose_name='Image de couverture')),
                ('attendee_count', models.PositiveIntegerField(default=0, verbose_name='Nombre de participants')),
                ('max_attendees', models.PositiveIntegerField(blank=True, null=True, verbose_name='Nombre maximum de participants')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('is_public', models.BooleanField(default=True, verbose_name='Public')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='events', to='users.communitygroup', verbose_name='Groupe associé')),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL, verbose_name='Organisateur')),
                ('quartier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geography.quartier', verbose_name='Quartier')),
            ],
            options={
                'verbose_name': 'Événement Communautaire',
                'verbose_name_plural': 'Événements Communautaires',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('achievement_type', models.CharField(choices=[('first_post', 'Premier Post'), ('first_friend', 'Premier Ami'), ('first_group', 'Premier Groupe'), ('first_event', 'Premier Événement'), ('post_milestone', 'Palier de Posts'), ('friend_milestone', "Palier d'Amis"), ('group_milestone', 'Palier de Groupes'), ('event_milestone', "Palier d'Événements"), ('engagement_milestone', "Palier d'Engagement"), ('community_leader', 'Leader Communautaire')], max_length=30, verbose_name='Type de réalisation')),
                ('title', models.CharField(max_length=100, verbose_name='Titre')),
                ('description', models.TextField(verbose_name='Description')),
                ('icon', models.CharField(max_length=10, verbose_name='Icône')),
                ('points', models.PositiveIntegerField(default=0, verbose_name='Points')),
                ('unlocked_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de déblocage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Réalisation Utilisateur',
                'verbose_name_plural': 'Réalisations Utilisateur',
                'ordering': ['-unlocked_at'],
                'unique_together': {('user', 'achievement_type')},
            },
        ),
        migrations.CreateModel(
            name='GroupMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'En attente'), ('approved', 'Approuvé'), ('rejected', 'Refusé'), ('banned', 'Banni')], default='pending', max_length=20, verbose_name='Statut')),
                ('role', models.CharField(choices=[('member', 'Membre'), ('moderator', 'Modérateur'), ('admin', 'Administrateur')], default='member', max_length=20, verbose_name='Rôle')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'adhésion")),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='users.communitygroup', verbose_name='Groupe')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_memberships', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Adhésion au Groupe',
                'verbose_name_plural': 'Adhésions aux Groupes',
                'ordering': ['-joined_at'],
                'unique_together': {('group', 'user')},
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('going', 'Participe'), ('maybe', 'Peut-être'), ('not_going', 'Ne participe pas')], default='going', max_length=20, verbose_name='Statut')),
                ('joined_at', models.DateTimeField(auto_now_add=True, verbose_name="Date d'inscription")),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Date de modification')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='users.communityevent', verbose_name='Événement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_attendances', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': "Participation à l'Événement",
                'verbose_name_plural': 'Participations aux Événements',
                'ordering': ['-joined_at'],
                'unique_together': {('event', 'user')},
            },
        ),
    ]

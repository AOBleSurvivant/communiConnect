#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script simple pour cr√©er des donn√©es g√©ographiques de base
"""

import requests
import json

API_URL = "http://localhost:8000/api"

def create_simple_geography():
    """Cr√©er des donn√©es g√©ographiques simples"""
    print("üó∫Ô∏è  Cr√©ation de donn√©es g√©ographiques simples...")
    
    # Connexion admin
    login_data = {
        'email': 'admin@communiconnect.com',
        'password': 'Admin123!'
    }
    
    try:
        print("üîê Connexion admin...")
        response = requests.post(f"{API_URL}/users/login/", json=login_data)
        if response.status_code != 200:
            print(f"‚ùå Erreur connexion: {response.status_code}")
            print(f"R√©ponse: {response.text}")
            return False
        
        data = response.json()
        token = data.get('tokens', {}).get('access')
        if not token:
            print("‚ùå Token manquant")
            return False
        
        print("‚úÖ Admin connect√©")
        
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }
        
        # Cr√©er une r√©gion
        print("üì° Cr√©ation r√©gion...")
        region_data = {'nom': 'Conakry', 'code': 'CNK'}
        print(f"Donn√©es r√©gion: {region_data}")
        response = requests.post(f"{API_URL}/geography/regions/", json=region_data, headers=headers)
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 201:
            region = response.json()
            region_id = region['id']
            print(f"‚úÖ R√©gion cr√©√©e: {region['nom']} (ID: {region_id})")
        else:
            print(f"‚ö†Ô∏è  R√©gion existante: {response.status_code}")
            # R√©cup√©rer la r√©gion existante
            response = requests.get(f"{API_URL}/geography/regions/", headers=headers)
            if response.status_code == 200:
                regions = response.json()
                if regions:
                    region_id = regions[0]['id']
                    print(f"‚ÑπÔ∏è  Utilisation r√©gion existante: {regions[0]['nom']} (ID: {region_id})")
                else:
                    print("‚ùå Aucune r√©gion disponible")
                    return False
            else:
                print("‚ùå Impossible de r√©cup√©rer les r√©gions")
                return False
        
        # Cr√©er une pr√©fecture
        print("üì° Cr√©ation pr√©fecture...")
        prefecture_data = {'nom': 'Conakry', 'code': 'CNK', 'region': region_id}
        print(f"Donn√©es pr√©fecture: {prefecture_data}")
        response = requests.post(f"{API_URL}/geography/prefectures/", json=prefecture_data, headers=headers)
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 201:
            prefecture = response.json()
            prefecture_id = prefecture['id']
            print(f"‚úÖ Pr√©fecture cr√©√©e: {prefecture['nom']} (ID: {prefecture_id})")
        else:
            print(f"‚ö†Ô∏è  Pr√©fecture existante: {response.status_code}")
            # R√©cup√©rer la pr√©fecture existante
            response = requests.get(f"{API_URL}/geography/prefectures/", headers=headers)
            if response.status_code == 200:
                prefectures = response.json()
                if prefectures:
                    prefecture_id = prefectures[0]['id']
                    print(f"‚ÑπÔ∏è  Utilisation pr√©fecture existante: {prefectures[0]['nom']} (ID: {prefecture_id})")
                else:
                    print("‚ùå Aucune pr√©fecture disponible")
                    return False
            else:
                print("‚ùå Impossible de r√©cup√©rer les pr√©fectures")
                return False
        
        # Cr√©er une commune
        print("üì° Cr√©ation commune...")
        commune_data = {'nom': 'Kaloum', 'code': 'KLM', 'prefecture': prefecture_id}
        print(f"Donn√©es commune: {commune_data}")
        response = requests.post(f"{API_URL}/geography/communes/", json=commune_data, headers=headers)
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 201:
            commune = response.json()
            commune_id = commune['id']
            print(f"‚úÖ Commune cr√©√©e: {commune['nom']} (ID: {commune_id})")
        else:
            print(f"‚ö†Ô∏è  Commune existante: {response.status_code}")
            # R√©cup√©rer la commune existante
            response = requests.get(f"{API_URL}/geography/communes/", headers=headers)
            if response.status_code == 200:
                communes = response.json()
                if communes:
                    commune_id = communes[0]['id']
                    print(f"‚ÑπÔ∏è  Utilisation commune existante: {communes[0]['nom']} (ID: {commune_id})")
                else:
                    print("‚ùå Aucune commune disponible")
                    return False
            else:
                print("‚ùå Impossible de r√©cup√©rer les communes")
                return False
        
        # Cr√©er un quartier
        print("üì° Cr√©ation quartier...")
        quartier_data = {'nom': 'Centre-ville', 'code': 'CTR', 'commune': commune_id}
        print(f"Donn√©es quartier: {quartier_data}")
        response = requests.post(f"{API_URL}/geography/quartiers/", json=quartier_data, headers=headers)
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text}")
        
        if response.status_code == 201:
            quartier = response.json()
            quartier_id = quartier['id']
            print(f"‚úÖ Quartier cr√©√©: {quartier['nom']} (ID: {quartier_id})")
        else:
            print(f"‚ö†Ô∏è  Quartier existant: {response.status_code}")
            # R√©cup√©rer le quartier existant
            response = requests.get(f"{API_URL}/geography/quartiers/", headers=headers)
            if response.status_code == 200:
                quartiers = response.json()
                if quartiers:
                    quartier_id = quartiers[0]['id']
                    print(f"‚ÑπÔ∏è  Utilisation quartier existant: {quartiers[0]['nom']} (ID: {quartier_id})")
                else:
                    print("‚ùå Aucun quartier disponible")
                    return False
            else:
                print("‚ùå Impossible de r√©cup√©rer les quartiers")
                return False
        
        print(f"\nüéØ SUCC√àS! Quartier disponible: ID {quartier_id}")
        return quartier_id
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ D√©marrage cr√©ation donn√©es g√©ographiques...")
    quartier_id = create_simple_geography()
    if quartier_id:
        print(f"\n‚úÖ Donn√©es g√©ographiques cr√©√©es avec succ√®s!")
        print(f"   Quartier ID: {quartier_id}")
        print(f"   Vous pouvez maintenant tester les fonctionnalit√©s sociales.")
    else:
        print(f"\n‚ùå √âchec de la cr√©ation des donn√©es g√©ographiques.") 
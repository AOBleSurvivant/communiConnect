#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Cr√©ation de donn√©es g√©ographiques via l'API REST
"""

import requests
import json

API_URL = "http://localhost:8000/api"

def create_geography_via_api():
    """Cr√©er des donn√©es g√©ographiques via l'API"""
    print("üó∫Ô∏è  Cr√©ation des donn√©es g√©ographiques via l'API...")
    
    # Cr√©er une r√©gion
    region_data = {
        'name': 'Conakry',
        'code': 'CNK'
    }
    
    try:
        response = requests.post(f"{API_URL}/geography/regions/", json=region_data)
        if response.status_code == 201:
            region = response.json()
            print(f"‚úÖ R√©gion cr√©√©e: {region['name']} (ID: {region['id']})")
            region_id = region['id']
        else:
            print(f"‚ö†Ô∏è  R√©gion existe d√©j√† ou erreur: {response.status_code}")
            # Essayer de r√©cup√©rer la r√©gion existante
            response = requests.get(f"{API_URL}/geography/regions/")
            if response.status_code == 200:
                regions = response.json()
                if regions:
                    region_id = regions[0]['id']
                    print(f"‚úÖ R√©gion trouv√©e: ID {region_id}")
                else:
                    print("‚ùå Aucune r√©gion disponible")
                    return None
            else:
                print("‚ùå Impossible de r√©cup√©rer les r√©gions")
                return None
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation r√©gion: {e}")
        return None
    
    # Cr√©er une pr√©fecture
    prefecture_data = {
        'name': 'Conakry',
        'code': 'CNK',
        'region': region_id
    }
    
    try:
        response = requests.post(f"{API_URL}/geography/prefectures/", json=prefecture_data)
        if response.status_code == 201:
            prefecture = response.json()
            print(f"‚úÖ Pr√©fecture cr√©√©e: {prefecture['name']} (ID: {prefecture['id']})")
            prefecture_id = prefecture['id']
        else:
            print(f"‚ö†Ô∏è  Pr√©fecture existe d√©j√† ou erreur: {response.status_code}")
            # Essayer de r√©cup√©rer la pr√©fecture existante
            response = requests.get(f"{API_URL}/geography/prefectures/")
            if response.status_code == 200:
                prefectures = response.json()
                if prefectures:
                    prefecture_id = prefectures[0]['id']
                    print(f"‚úÖ Pr√©fecture trouv√©e: ID {prefecture_id}")
                else:
                    print("‚ùå Aucune pr√©fecture disponible")
                    return None
            else:
                print("‚ùå Impossible de r√©cup√©rer les pr√©fectures")
                return None
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation pr√©fecture: {e}")
        return None
    
    # Cr√©er une commune
    commune_data = {
        'name': 'Kaloum',
        'code': 'KLM',
        'prefecture': prefecture_id
    }
    
    try:
        response = requests.post(f"{API_URL}/geography/communes/", json=commune_data)
        if response.status_code == 201:
            commune = response.json()
            print(f"‚úÖ Commune cr√©√©e: {commune['name']} (ID: {commune['id']})")
            commune_id = commune['id']
        else:
            print(f"‚ö†Ô∏è  Commune existe d√©j√† ou erreur: {response.status_code}")
            # Essayer de r√©cup√©rer la commune existante
            response = requests.get(f"{API_URL}/geography/communes/")
            if response.status_code == 200:
                communes = response.json()
                if communes:
                    commune_id = communes[0]['id']
                    print(f"‚úÖ Commune trouv√©e: ID {commune_id}")
                else:
                    print("‚ùå Aucune commune disponible")
                    return None
            else:
                print("‚ùå Impossible de r√©cup√©rer les communes")
                return None
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation commune: {e}")
        return None
    
    # Cr√©er un quartier
    quartier_data = {
        'name': 'Centre-ville',
        'code': 'CTR',
        'commune': commune_id,
        'latitude': 9.5370,
        'longitude': -13.6785
    }
    
    try:
        response = requests.post(f"{API_URL}/geography/quartiers/", json=quartier_data)
        if response.status_code == 201:
            quartier = response.json()
            print(f"‚úÖ Quartier cr√©√©: {quartier['name']} (ID: {quartier['id']})")
            return quartier['id']
        else:
            print(f"‚ö†Ô∏è  Quartier existe d√©j√† ou erreur: {response.status_code}")
            # Essayer de r√©cup√©rer le quartier existant
            response = requests.get(f"{API_URL}/geography/quartiers/")
            if response.status_code == 200:
                quartiers = response.json()
                if quartiers:
                    quartier_id = quartiers[0]['id']
                    print(f"‚úÖ Quartier trouv√©: ID {quartier_id}")
                    return quartier_id
                else:
                    print("‚ùå Aucun quartier disponible")
                    return None
            else:
                print("‚ùå Impossible de r√©cup√©rer les quartiers")
                return None
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation quartier: {e}")
        return None

if __name__ == "__main__":
    quartier_id = create_geography_via_api()
    if quartier_id:
        print(f"\nüéØ Quartier ID pour les tests: {quartier_id}")
    else:
        print("\n‚ùå Impossible de cr√©er les donn√©es g√©ographiques") 
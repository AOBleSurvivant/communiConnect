// Debug script pour tester la cr√©ation d'alertes depuis le frontend
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:3000

console.log('üîç Debug Frontend Alertes - CommuniConnect');

// Fonction pour r√©cup√©rer le token depuis localStorage
function getAuthToken() {
    const token = localStorage.getItem('accessToken') || localStorage.getItem('token');
    console.log('Token trouv√©:', token ? token.substring(0, 20) + '...' : 'Aucun token');
    return token;
}

// Fonction pour tester l'API d'alertes
async function testAlertAPI() {
    console.log('üß™ Test de l\'API d\'alertes...');
    
    const token = getAuthToken();
    if (!token) {
        console.error('‚ùå Aucun token d\'authentification trouv√©');
        return;
    }

    try {
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        console.log('Status:', response.status);
        const data = await response.json();
        console.log('R√©ponse:', data);
        
        if (response.ok) {
            console.log('‚úÖ API d\'alertes accessible');
        } else {
            console.error('‚ùå Erreur API d\'alertes:', data);
        }
    } catch (error) {
        console.error('‚ùå Erreur connexion:', error);
    }
}

// Fonction pour cr√©er une alerte de test
async function createTestAlert() {
    console.log('üß™ Cr√©ation d\'une alerte de test...');
    
    const token = getAuthToken();
    if (!token) {
        console.error('‚ùå Aucun token d\'authentification trouv√©');
        return;
    }

    const alertData = {
        title: 'Test d\'alerte - Fuite de gaz',
        description: 'Fuite de gaz d√©tect√©e dans le quartier. Odeur forte dans la rue principale.',
        category: 'gas_leak',
        latitude: 48.8566,
        longitude: 2.3522,
        address: '123 Rue de la Paix',
        neighborhood: 'Centre-ville',
        city: 'Paris',
        postal_code: '75001'
    };

    try {
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(alertData)
        });

        console.log('Status:', response.status);
        const data = await response.json();
        console.log('R√©ponse:', data);
        
        if (response.ok) {
            console.log('‚úÖ Alerte cr√©√©e avec succ√®s!');
        } else {
            console.error('‚ùå Erreur cr√©ation alerte:', data);
        }
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation alerte:', error);
    }
}

// Fonction pour v√©rifier l'√©tat de l'authentification
function checkAuthState() {
    console.log('üîç V√©rification de l\'√©tat d\'authentification...');
    
    const token = getAuthToken();
    const user = localStorage.getItem('user');
    
    console.log('Token pr√©sent:', !!token);
    console.log('User pr√©sent:', !!user);
    
    if (user) {
        try {
            const userData = JSON.parse(user);
            console.log('Donn√©es utilisateur:', userData);
        } catch (e) {
            console.log('User data (raw):', user);
        }
    }
}

// Fonction pour simuler la cr√©ation d'alerte depuis le composant React
function simulateReactAlertCreation() {
    console.log('üß™ Simulation de cr√©ation d\'alerte depuis React...');
    
    // Simuler les donn√©es du formulaire
    const formData = {
        title: 'Test d\'alerte - Fuite de gaz',
        description: 'Fuite de gaz d√©tect√©e dans le quartier. Odeur forte dans la rue principale.',
        category: 'gas_leak',
        latitude: 48.8566,
        longitude: 2.3522,
        address: '123 Rue de la Paix',
        neighborhood: 'Centre-ville',
        city: 'Paris',
        postal_code: '75001'
    };
    
    console.log('Donn√©es du formulaire:', formData);
    
    // Simuler l'appel √† l'API
    createTestAlert();
}

// Fonction pour v√©rifier les services
function checkServices() {
    console.log('üîç V√©rification des services...');
    
    // V√©rifier si les services sont disponibles
    if (window.alertService) {
        console.log('‚úÖ alertService disponible');
    } else {
        console.log('‚ùå alertService non disponible');
    }
    
    if (window.authAPI) {
        console.log('‚úÖ authAPI disponible');
    } else {
        console.log('‚ùå authAPI non disponible');
    }
}

// Fonction principale de debug
function runDebug() {
    console.log('üöÄ D√©marrage du debug...');
    
    checkAuthState();
    checkServices();
    testAlertAPI();
    
    console.log('\nüìã Commandes disponibles:');
    console.log('- checkAuthState() : V√©rifier l\'√©tat d\'authentification');
    console.log('- testAlertAPI() : Tester l\'API d\'alertes');
    console.log('- createTestAlert() : Cr√©er une alerte de test');
    console.log('- simulateReactAlertCreation() : Simuler la cr√©ation depuis React');
    console.log('- checkServices() : V√©rifier les services disponibles');
}

// Ex√©cuter le debug automatiquement
runDebug(); 
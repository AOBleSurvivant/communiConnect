// Script de debug pour l'affichage de la vid√©o
// √Ä ex√©cuter dans la console F12 du navigateur

console.log('üé• DEBUG VID√âO - DIAGNOSTIC COMPLET');
console.log('=' * 50);

// 1. V√©rifier les √©tats React
function checkReactStates() {
  console.log('üìä V√âRIFICATION DES √âTATS REACT:');
  
  try {
    // Ces variables doivent √™tre disponibles dans le scope du composant LiveStream
    console.log('recordedVideo:', typeof recordedVideo, recordedVideo);
    console.log('isLive:', typeof isLive, isLive);
    console.log('videoDuration:', typeof videoDuration, videoDuration);
    console.log('isPlaying:', typeof isPlaying, isPlaying);
    console.log('currentTime:', typeof currentTime, currentTime);
    console.log('liveInfo:', typeof liveInfo, liveInfo);
  } catch (e) {
    console.log('‚ùå Impossible d\'acc√©der aux √©tats React:', e.message);
  }
}

// 2. V√©rifier l'√©l√©ment vid√©o
function checkVideoElement() {
  console.log('üé¨ V√âRIFICATION DE L\'√âL√âMENT VID√âO:');
  
  const videoElement = document.querySelector('video');
  if (videoElement) {
    console.log('‚úÖ √âl√©ment vid√©o trouv√©');
    console.log('src:', videoElement.src);
    console.log('srcObject:', videoElement.srcObject);
    console.log('currentTime:', videoElement.currentTime);
    console.log('duration:', videoElement.duration);
    console.log('paused:', videoElement.paused);
    console.log('readyState:', videoElement.readyState);
    console.log('networkState:', videoElement.networkState);
    console.log('error:', videoElement.error);
    console.log('videoWidth:', videoElement.videoWidth);
    console.log('videoHeight:', videoElement.videoHeight);
  } else {
    console.log('‚ùå Aucun √©l√©ment vid√©o trouv√©');
  }
}

// 3. Forcer l'affichage de la vid√©o
function forceVideoDisplay() {
  console.log('üîÑ TENTATIVE DE FOR√áAGE AFFICHAGE VID√âO:');
  
  const videoElement = document.querySelector('video');
  if (videoElement && videoElement.src) {
    console.log('üé¨ Vid√©o trouv√©e, tentative de lecture...');
    
    // Forcer le chargement
    videoElement.load();
    
    // Attendre et essayer de lire
    setTimeout(() => {
      videoElement.play().then(() => {
        console.log('‚úÖ Lecture forc√©e r√©ussie');
      }).catch((error) => {
        console.log('‚ùå Erreur lecture forc√©e:', error);
      });
    }, 500);
  } else {
    console.log('‚ùå Pas de vid√©o √† forcer');
  }
}

// 4. V√©rifier l'interface utilisateur
function checkUI() {
  console.log('üñ•Ô∏è V√âRIFICATION DE L\'INTERFACE:');
  
  // V√©rifier les badges
  const badges = document.querySelectorAll('[class*="badge"], [class*="status"]');
  console.log('Badges trouv√©s:', badges.length);
  
  // V√©rifier les contr√¥les de lecture
  const playButtons = document.querySelectorAll('button[onclick*="play"], button[onclick*="toggle"]');
  console.log('Boutons de lecture trouv√©s:', playButtons.length);
  
  // V√©rifier les messages d'√©tat
  const messages = document.querySelectorAll('[class*="message"], [class*="toast"]');
  console.log('Messages trouv√©s:', messages.length);
  
  // V√©rifier les √©l√©ments avec "VID√âO PR√äTE"
  const videoReadyElements = document.querySelectorAll('*:contains("VID√âO PR√äTE")');
  console.log('√âl√©ments "VID√âO PR√äTE" trouv√©s:', videoReadyElements.length);
}

// 5. V√©rifier les logs de la console
function checkConsoleLogs() {
  console.log('üìù V√âRIFICATION DES LOGS:');
  
  // Chercher les logs sp√©cifiques
  const logs = [
    'üé¨ Cr√©ation du blob vid√©o',
    'üé• Configuration de la lecture vid√©o',
    '‚úÖ Vid√©o configur√©e pour la lecture',
    'üîÑ Force video display',
    '‚úÖ Vid√©o charg√©e avec succ√®s',
    'üîÑ Re-rendu forc√©'
  ];
  
  logs.forEach(log => {
    console.log(`Recherche: ${log}`);
  });
}

// 6. Forcer la mise √† jour des √©tats
function forceStateUpdate() {
  console.log('üîÑ FOR√áAGE MISE √Ä JOUR DES √âTATS:');
  
  try {
    // Essayer de forcer la mise √† jour
    if (typeof setRecordedVideo === 'function') {
      console.log('üîÑ For√ßage setRecordedVideo...');
      // Cette fonction sera appel√©e si disponible
    }
    
    if (typeof setVideoDuration === 'function') {
      console.log('üîÑ For√ßage setVideoDuration...');
      // Cette fonction sera appel√©e si disponible
    }
  } catch (e) {
    console.log('‚ùå Impossible de forcer la mise √† jour:', e.message);
  }
}

// Ex√©cution du diagnostic complet
console.log('üöÄ D√âMARRAGE DU DIAGNOSTIC...');
checkReactStates();
checkVideoElement();
checkUI();
checkConsoleLogs();

console.log('üí° INSTRUCTIONS DE DEBUG:');
console.log('1. V√©rifiez que recordedVideo contient une URL blob');
console.log('2. V√©rifiez que isLive est false');
console.log('3. V√©rifiez que videoDuration > 0 et est fini');
console.log('4. V√©rifiez que l\'√©l√©ment vid√©o a un src valide');
console.log('5. V√©rifiez que les contr√¥les de lecture sont visibles');

// Fonctions pour forcer les actions
window.forceVideoDisplay = forceVideoDisplay;
window.forceStateUpdate = forceStateUpdate;

console.log('‚úÖ Diagnostic termin√©. Utilisez forceVideoDisplay() ou forceStateUpdate() pour forcer les actions.'); 
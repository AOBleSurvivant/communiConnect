// Script de diagnostic automatique pour les alertes
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:3000

console.log('üîç Diagnostic Automatique Alertes - CommuniConnect');

// Fonction de diagnostic principal
async function runDiagnostic() {
    console.log('üöÄ D√©marrage du diagnostic automatique...');
    
    const results = {
        api_accessible: false,
        user_authenticated: false,
        alert_creation_works: false,
        react_components_loaded: false,
        errors: []
    };
    
    // 1. Test de connexion √† l'API
    console.log('\n1Ô∏è‚É£ Test de connexion √† l\'API...');
    try {
        const response = await fetch('http://localhost:8000/api/health/');
        if (response.ok) {
            console.log('‚úÖ API accessible');
            results.api_accessible = true;
        } else {
            console.log('‚ùå API non accessible');
            results.errors.push('API non accessible');
        }
    } catch (error) {
        console.log('‚ùå Erreur connexion API:', error.message);
        results.errors.push('Erreur connexion API');
    }
    
    // 2. Test d'authentification
    console.log('\n2Ô∏è‚É£ Test d\'authentification...');
    const token = localStorage.getItem('access_token');
    const user = localStorage.getItem('user');
    
    if (token && user) {
        try {
            const userData = JSON.parse(user);
            console.log('‚úÖ Utilisateur connect√©:', userData.username);
            results.user_authenticated = true;
        } catch (e) {
            console.log('‚ùå Donn√©es utilisateur corrompues');
            results.errors.push('Donn√©es utilisateur corrompues');
        }
    } else {
        console.log('‚ùå Aucun utilisateur connect√©');
        results.errors.push('Aucun utilisateur connect√©');
    }
    
    // 3. Test de cr√©ation d'alerte
    if (results.user_authenticated) {
        console.log('\n3Ô∏è‚É£ Test de cr√©ation d\'alerte...');
        try {
            const alertData = {
                title: 'Test diagnostic - Alerte automatique',
                description: 'Alerte cr√©√©e automatiquement par le diagnostic',
                category: 'other',
                latitude: 48.8566,
                longitude: 2.3522,
                address: 'Test Address',
                neighborhood: 'Test Neighborhood',
                city: 'Test City',
                postal_code: '00000'
            };
            
            const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(alertData)
            });
            
            const data = await response.json();
            
            if (response.ok) {
                console.log('‚úÖ Cr√©ation d\'alerte r√©ussie');
                results.alert_creation_works = true;
                
                // Nettoyer l'alerte de test
                await fetch(`http://localhost:8000/api/notifications/alerts/${data.alert_id}/`, {
                    method: 'DELETE',
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });
                console.log('üßπ Alerte de test nettoy√©e');
                
            } else {
                console.log('‚ùå Erreur cr√©ation alerte:', data);
                results.errors.push(`Erreur cr√©ation alerte: ${JSON.stringify(data)}`);
            }
        } catch (error) {
            console.log('‚ùå Erreur test cr√©ation alerte:', error);
            results.errors.push('Erreur test cr√©ation alerte');
        }
    }
    
    // 4. Test des composants React
    console.log('\n4Ô∏è‚É£ Test des composants React...');
    if (window.React && window.ReactDOM) {
        console.log('‚úÖ React disponible');
        results.react_components_loaded = true;
    } else {
        console.log('‚ùå React non disponible');
        results.errors.push('React non disponible');
    }
    
    // 5. Test des services
    console.log('\n5Ô∏è‚É£ Test des services...');
    const services = ['alertService', 'authAPI', 'api'];
    services.forEach(service => {
        if (window[service]) {
            console.log(`‚úÖ ${service} disponible`);
        } else {
            console.log(`‚ùå ${service} non disponible`);
            results.errors.push(`${service} non disponible`);
        }
    });
    
    // 6. Affichage du rapport
    console.log('\nüìä RAPPORT DE DIAGNOSTIC');
    console.log('========================');
    console.log(`API accessible: ${results.api_accessible ? '‚úÖ' : '‚ùå'}`);
    console.log(`Utilisateur authentifi√©: ${results.user_authenticated ? '‚úÖ' : '‚ùå'}`);
    console.log(`Cr√©ation d'alerte fonctionne: ${results.alert_creation_works ? '‚úÖ' : '‚ùå'}`);
    console.log(`Composants React charg√©s: ${results.react_components_loaded ? '‚úÖ' : '‚ùå'}`);
    
    if (results.errors.length > 0) {
        console.log('\n‚ùå ERREURS D√âTECT√âES:');
        results.errors.forEach((error, index) => {
            console.log(`${index + 1}. ${error}`);
        });
    } else {
        console.log('\n‚úÖ Aucune erreur d√©tect√©e');
    }
    
    // 7. Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    if (!results.user_authenticated) {
        console.log('1. Ex√©cutez forceLogin() pour vous connecter');
    }
    if (!results.alert_creation_works && results.user_authenticated) {
        console.log('2. V√©rifiez les permissions utilisateur');
    }
    if (results.errors.length === 0) {
        console.log('‚úÖ Syst√®me op√©rationnel - Le probl√®me est dans l\'interface utilisateur');
    }
    
    return results;
}

// Fonction pour corriger automatiquement les probl√®mes
async function autoFix() {
    console.log('üîß Tentative de correction automatique...');
    
    const diagnostic = await runDiagnostic();
    
    if (!diagnostic.user_authenticated) {
        console.log('üîß Correction: Connexion automatique...');
        await forceLogin();
    }
    
    if (!diagnostic.alert_creation_works && diagnostic.user_authenticated) {
        console.log('üîß Correction: Test de cr√©ation d\'alerte...');
        await testAlertCreation();
    }
}

// Fonction pour forcer la connexion
async function forceLogin() {
    console.log('üîê Connexion automatique...');
    
    const timestamp = Date.now();
    const userData = {
        username: `testuser_${timestamp}`,
        email: `test${timestamp}@communiconnect.com`,
        password: 'TestPass123!',
        password_confirm: 'TestPass123!',
        first_name: 'Test',
        last_name: 'User'
    };

    try {
        const response = await fetch('http://localhost:8000/api/users/register/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });

        const data = await response.json();
        
        if (response.ok) {
            localStorage.setItem('access_token', data.tokens.access);
            localStorage.setItem('refresh_token', data.tokens.refresh);
            localStorage.setItem('user', JSON.stringify(data.user));
            console.log('‚úÖ Connexion automatique r√©ussie');
            return true;
        } else {
            console.log('‚ùå Erreur connexion automatique:', data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Erreur connexion automatique:', error);
        return false;
    }
}

// Fonction pour tester la cr√©ation d'alerte
async function testAlertCreation() {
    const token = localStorage.getItem('access_token');
    
    if (!token) {
        console.log('‚ùå Aucun token disponible');
        return false;
    }
    
    try {
        const alertData = {
            title: 'Test auto-fix - Alerte',
            description: 'Test automatique',
            category: 'other',
            latitude: 48.8566,
            longitude: 2.3522,
            address: 'Test',
            neighborhood: 'Test',
            city: 'Test',
            postal_code: '00000'
        };
        
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(alertData)
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Test cr√©ation alerte r√©ussi');
            
            // Nettoyer
            await fetch(`http://localhost:8000/api/notifications/alerts/${data.alert_id}/`, {
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });
            
            return true;
        } else {
            console.log('‚ùå Test cr√©ation alerte √©chou√©:', data);
            return false;
        }
    } catch (error) {
        console.log('‚ùå Erreur test cr√©ation alerte:', error);
        return false;
    }
}

// Fonction pour tester l'interface utilisateur
function testUI() {
    console.log('üé® Test de l\'interface utilisateur...');
    
    // V√©rifier si les composants sont pr√©sents
    const alertButton = document.querySelector('[data-testid="create-alert-button"]') || 
                       document.querySelector('button[onclick*="alert"]') ||
                       document.querySelector('button:contains("Cr√©er")');
    
    if (alertButton) {
        console.log('‚úÖ Bouton cr√©ation alerte trouv√©');
        console.log('üß™ Test du clic sur le bouton...');
        alertButton.click();
    } else {
        console.log('‚ùå Bouton cr√©ation alerte non trouv√©');
    }
    
    // V√©rifier les modales
    const modals = document.querySelectorAll('.modal, [role="dialog"]');
    console.log(`üìã ${modals.length} modales trouv√©es`);
    
    // V√©rifier les formulaires
    const forms = document.querySelectorAll('form');
    console.log(`üìù ${forms.length} formulaires trouv√©s`);
}

// Fonction principale
function runCompleteDiagnostic() {
    console.log('üöÄ Diagnostic complet des alertes...');
    
    // Diagnostic automatique
    runDiagnostic().then(results => {
        console.log('\nüéØ R√âSUM√â:');
        if (results.errors.length === 0) {
            console.log('‚úÖ Syst√®me op√©rationnel');
            console.log('Le probl√®me est probablement dans l\'interface utilisateur');
            testUI();
        } else {
            console.log('‚ùå Probl√®mes d√©tect√©s');
            console.log('Tentative de correction automatique...');
            autoFix();
        }
    });
}

// Commandes disponibles
console.log('\nüìã Commandes disponibles:');
console.log('- runCompleteDiagnostic() : Diagnostic complet');
console.log('- runDiagnostic() : Diagnostic de base');
console.log('- autoFix() : Correction automatique');
console.log('- testUI() : Test interface utilisateur');
console.log('- forceLogin() : Connexion forc√©e');
console.log('- testAlertCreation() : Test cr√©ation alerte');

// Ex√©cuter automatiquement
runCompleteDiagnostic(); 
// Script pour forcer la connexion d'un utilisateur dans le frontend
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:3000

console.log('üîê Force Login - CommuniConnect');

// Fonction pour cr√©er un utilisateur de test et le connecter
async function forceLogin() {
    console.log('üß™ Cr√©ation et connexion d\'un utilisateur de test...');
    
    const timestamp = Date.now();
    const userData = {
        username: `testuser_${timestamp}`,
        email: `test${timestamp}@communiconnect.com`,
        password: 'TestPass123!',
        password_confirm: 'TestPass123!',
        first_name: 'Test',
        last_name: 'User'
    };

    try {
        // 1. Cr√©er l'utilisateur
        console.log('1. Cr√©ation de l\'utilisateur...');
        const registerResponse = await fetch('http://localhost:8000/api/users/register/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
        });

        const registerData = await registerResponse.json();
        
        if (registerResponse.ok) {
            console.log('‚úÖ Utilisateur cr√©√© avec succ√®s');
            
            // 2. Sauvegarder les donn√©es dans localStorage
            const { tokens, user } = registerData;
            
            localStorage.setItem('access_token', tokens.access);
            localStorage.setItem('refresh_token', tokens.refresh);
            localStorage.setItem('user', JSON.stringify(user));
            
            console.log('‚úÖ Donn√©es sauvegard√©es dans localStorage');
            console.log('Token:', tokens.access.substring(0, 20) + '...');
            console.log('User:', user.username);
            
            // 3. Recharger la page pour appliquer l'authentification
            console.log('üîÑ Rechargement de la page...');
            window.location.reload();
            
        } else {
            console.error('‚ùå Erreur cr√©ation utilisateur:', registerData);
            
            // Si l'utilisateur existe d√©j√†, essayer de se connecter
            console.log('üîÑ Tentative de connexion avec l\'utilisateur existant...');
            await forceLoginExisting(userData.email, userData.password);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur force login:', error);
    }
}

// Fonction pour se connecter avec un utilisateur existant
async function forceLoginExisting(email, password) {
    try {
        const loginResponse = await fetch('http://localhost:8000/api/users/login/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email, password })
        });

        const loginData = await loginResponse.json();
        
        if (loginResponse.ok) {
            console.log('‚úÖ Connexion r√©ussie');
            
            // Sauvegarder les donn√©es
            const { tokens, user } = loginData;
            
            localStorage.setItem('access_token', tokens.access);
            localStorage.setItem('refresh_token', tokens.refresh);
            localStorage.setItem('user', JSON.stringify(user));
            
            console.log('‚úÖ Donn√©es sauvegard√©es dans localStorage');
            console.log('Token:', tokens.access.substring(0, 20) + '...');
            console.log('User:', user.username);
            
            // Recharger la page
            console.log('üîÑ Rechargement de la page...');
            window.location.reload();
            
        } else {
            console.error('‚ùå Erreur connexion:', loginData);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur connexion:', error);
    }
}

// Fonction pour v√©rifier l'√©tat de l'authentification
function checkAuthState() {
    console.log('üîç V√©rification de l\'√©tat d\'authentification...');
    
    const token = localStorage.getItem('access_token');
    const user = localStorage.getItem('user');
    
    console.log('Token pr√©sent:', !!token);
    console.log('User pr√©sent:', !!user);
    
    if (token && user) {
        try {
            const userData = JSON.parse(user);
            console.log('‚úÖ Utilisateur connect√©:', userData.username);
            console.log('Token:', token.substring(0, 20) + '...');
            return true;
        } catch (e) {
            console.log('‚ùå Donn√©es utilisateur corrompues');
            return false;
        }
    } else {
        console.log('‚ùå Aucun utilisateur connect√©');
        return false;
    }
}

// Fonction pour tester la cr√©ation d'alerte apr√®s connexion
async function testAlertAfterLogin() {
    if (!checkAuthState()) {
        console.log('‚ùå Veuillez d\'abord vous connecter avec forceLogin()');
        return;
    }
    
    console.log('üß™ Test de cr√©ation d\'alerte apr√®s connexion...');
    
    const token = localStorage.getItem('access_token');
    const alertData = {
        title: 'Test d\'alerte - Fuite de gaz',
        description: 'Fuite de gaz d√©tect√©e dans le quartier. Odeur forte dans la rue principale.',
        category: 'gas_leak',
        latitude: 48.8566,
        longitude: 2.3522,
        address: '123 Rue de la Paix',
        neighborhood: 'Centre-ville',
        city: 'Paris',
        postal_code: '75001'
    };

    try {
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(alertData)
        });

        console.log('Status:', response.status);
        const data = await response.json();
        console.log('R√©ponse:', data);
        
        if (response.ok) {
            console.log('‚úÖ Alerte cr√©√©e avec succ√®s!');
            console.log('ID de l\'alerte:', data.alert_id);
        } else {
            console.error('‚ùå Erreur cr√©ation alerte:', data);
        }
    } catch (error) {
        console.error('‚ùå Erreur cr√©ation alerte:', error);
    }
}

// Fonction pour nettoyer l'authentification
function clearAuth() {
    console.log('üßπ Nettoyage de l\'authentification...');
    localStorage.removeItem('access_token');
    localStorage.removeItem('refresh_token');
    localStorage.removeItem('user');
    console.log('‚úÖ Authentification nettoy√©e');
}

// Fonction principale
function runForceLogin() {
    console.log('üöÄ D√©marrage du force login...');
    
    if (checkAuthState()) {
        console.log('‚úÖ Utilisateur d√©j√† connect√©');
        console.log('Vous pouvez maintenant tester la cr√©ation d\'alertes');
    } else {
        console.log('‚ùå Aucun utilisateur connect√©');
        console.log('Ex√©cution du force login...');
        forceLogin();
    }
    
    console.log('\nüìã Commandes disponibles:');
    console.log('- forceLogin() : Cr√©er et connecter un utilisateur de test');
    console.log('- checkAuthState() : V√©rifier l\'√©tat d\'authentification');
    console.log('- testAlertAfterLogin() : Tester la cr√©ation d\'alerte');
    console.log('- clearAuth() : Nettoyer l\'authentification');
}

// Ex√©cuter automatiquement
runForceLogin(); 
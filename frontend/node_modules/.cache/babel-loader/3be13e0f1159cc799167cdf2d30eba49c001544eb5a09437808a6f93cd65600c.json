{"ast":null,"code":"import axios from 'axios';\n\n// Configuration de base d'axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expiré, rediriger vers la connexion\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Service d'authentification\nexport const authAPI = {\n  // Inscription\n  register: async userData => {\n    const response = await api.post('/users/register/', userData);\n    return response.data;\n  },\n  // Connexion\n  login: async (email, password) => {\n    const response = await api.post('/users/login/', {\n      email,\n      password\n    });\n    return response.data;\n  },\n  // Déconnexion\n  logout: async () => {\n    const response = await api.post('/users/logout/');\n    return response.data;\n  },\n  // Rafraîchir le token\n  refreshToken: async refreshToken => {\n    const response = await api.post('/token/refresh/', {\n      refresh: refreshToken\n    });\n    return response.data;\n  }\n};\n\n// Service des utilisateurs\nexport const userAPI = {\n  // Récupérer le profil utilisateur\n  getProfile: async () => {\n    const response = await api.get('/users/profile/');\n    return response.data;\n  },\n  // Mettre à jour le profil\n  updateProfile: async userData => {\n    const response = await api.patch('/users/profile/', userData);\n    return response.data;\n  },\n  // Récupérer les données du tableau de bord\n  getDashboardData: async () => {\n    const response = await api.get('/users/dashboard/');\n    return response.data;\n  }\n};\n\n// Service des données géographiques\nexport const geographyAPI = {\n  // Récupérer toutes les données géographiques\n  getGeographicData: async () => {\n    const response = await api.get('/users/geographic-data/');\n    return response.data;\n  },\n  // Vérification géographique\n  verifyGeographic: async () => {\n    const response = await api.post('/users/verify-geographic/');\n    return response.data;\n  }\n};\n\n// Service de gestion des tokens\nexport const tokenService = {\n  // Sauvegarder les tokens\n  saveTokens: tokens => {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  },\n  // Récupérer le token d'accès\n  getAccessToken: () => {\n    return localStorage.getItem('access_token');\n  },\n  // Récupérer le token de rafraîchissement\n  getRefreshToken: () => {\n    return localStorage.getItem('refresh_token');\n  },\n  // Supprimer les tokens\n  clearTokens: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  },\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    return !!localStorage.getItem('access_token');\n  }\n};\n\n// Service de gestion des données utilisateur\nexport const userService = {\n  // Sauvegarder les données utilisateur\n  saveUser: user => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n  // Récupérer les données utilisateur\n  getUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n  // Supprimer les données utilisateur\n  clearUser: () => {\n    localStorage.removeItem('user');\n  }\n};\n\n// Fonction utilitaire pour gérer les erreurs API\nexport const handleAPIError = error => {\n  if (error.response) {\n    // Erreur de réponse du serveur\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 400:\n        return {\n          type: 'validation',\n          message: data.error || 'Données invalides',\n          details: data\n        };\n      case 401:\n        return {\n          type: 'auth',\n          message: 'Non autorisé. Veuillez vous reconnecter.'\n        };\n      case 403:\n        return {\n          type: 'geographic',\n          message: data.error || 'Accès géographique refusé',\n          code: data.code\n        };\n      case 404:\n        return {\n          type: 'not_found',\n          message: 'Ressource non trouvée'\n        };\n      case 500:\n        return {\n          type: 'server',\n          message: 'Erreur serveur. Veuillez réessayer plus tard.'\n        };\n      default:\n        return {\n          type: 'unknown',\n          message: 'Une erreur inattendue s\\'est produite.'\n        };\n    }\n  } else if (error.request) {\n    // Erreur de réseau\n    return {\n      type: 'network',\n      message: 'Erreur de connexion. Vérifiez votre connexion internet.'\n    };\n  } else {\n    // Autre erreur\n    return {\n      type: 'unknown',\n      message: 'Une erreur inattendue s\\'est produite.'\n    };\n  }\n};\n\n// Fonction utilitaire pour valider les données de formulaire\nexport const validateFormData = (data, rules) => {\n  const errors = {};\n  Object.keys(rules).forEach(field => {\n    const value = data[field];\n    const fieldRules = rules[field];\n\n    // Vérification requise\n    if (fieldRules.required && (!value || value.trim() === '')) {\n      errors[field] = `${fieldRules.label || field} est requis`;\n      return;\n    }\n\n    // Vérification de longueur minimale\n    if (fieldRules.minLength && value && value.length < fieldRules.minLength) {\n      errors[field] = `${fieldRules.label || field} doit contenir au moins ${fieldRules.minLength} caractères`;\n    }\n\n    // Vérification de longueur maximale\n    if (fieldRules.maxLength && value && value.length > fieldRules.maxLength) {\n      errors[field] = `${fieldRules.label || field} ne peut pas dépasser ${fieldRules.maxLength} caractères`;\n    }\n\n    // Vérification d'email\n    if (fieldRules.email && value) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        errors[field] = 'Format d\\'email invalide';\n      }\n    }\n\n    // Vérification de correspondance\n    if (fieldRules.match && value !== data[fieldRules.match]) {\n      errors[field] = `${fieldRules.label || field} ne correspond pas`;\n    }\n  });\n  return errors;\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","register","userData","post","data","login","email","password","logout","refreshToken","refresh","userAPI","getProfile","get","updateProfile","patch","getDashboardData","geographyAPI","getGeographicData","verifyGeographic","tokenService","saveTokens","tokens","setItem","access","getAccessToken","getRefreshToken","clearTokens","isAuthenticated","userService","saveUser","user","JSON","stringify","getUser","parse","clearUser","handleAPIError","type","message","details","code","validateFormData","rules","errors","Object","keys","forEach","field","value","fieldRules","required","trim","label","minLength","length","maxLength","emailRegex","test","match"],"sources":["C:/Users/DELL/Documents/mesProjets/CommuniConnect/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\n\n// Configuration de base d'axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Intercepteur pour ajouter le token d'authentification\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('access_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Intercepteur pour gérer les erreurs de réponse\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expiré, rediriger vers la connexion\n        localStorage.removeItem('access_token');\n        localStorage.removeItem('refresh_token');\n      localStorage.removeItem('user');\n        window.location.href = '/login';\n    }\n    return Promise.reject(error);\n  }\n);\n\n// Service d'authentification\nexport const authAPI = {\n  // Inscription\n  register: async (userData) => {\n    const response = await api.post('/users/register/', userData);\n    return response.data;\n  },\n\n  // Connexion\n  login: async (email, password) => {\n    const response = await api.post('/users/login/', {\n      email,\n      password,\n    });\n    return response.data;\n  },\n\n  // Déconnexion\n  logout: async () => {\n    const response = await api.post('/users/logout/');\n    return response.data;\n  },\n\n  // Rafraîchir le token\n  refreshToken: async (refreshToken) => {\n    const response = await api.post('/token/refresh/', {\n      refresh: refreshToken,\n    });\n    return response.data;\n  },\n};\n\n// Service des utilisateurs\nexport const userAPI = {\n  // Récupérer le profil utilisateur\n  getProfile: async () => {\n    const response = await api.get('/users/profile/');\n    return response.data;\n  },\n\n  // Mettre à jour le profil\n  updateProfile: async (userData) => {\n    const response = await api.patch('/users/profile/', userData);\n    return response.data;\n  },\n\n  // Récupérer les données du tableau de bord\n  getDashboardData: async () => {\n    const response = await api.get('/users/dashboard/');\n    return response.data;\n  },\n};\n\n// Service des données géographiques\nexport const geographyAPI = {\n  // Récupérer toutes les données géographiques\n  getGeographicData: async () => {\n    const response = await api.get('/users/geographic-data/');\n    return response.data;\n  },\n\n  // Vérification géographique\n  verifyGeographic: async () => {\n    const response = await api.post('/users/verify-geographic/');\n    return response.data;\n  },\n};\n\n// Service de gestion des tokens\nexport const tokenService = {\n  // Sauvegarder les tokens\n  saveTokens: (tokens) => {\n    localStorage.setItem('access_token', tokens.access);\n    localStorage.setItem('refresh_token', tokens.refresh);\n  },\n\n  // Récupérer le token d'accès\n  getAccessToken: () => {\n    return localStorage.getItem('access_token');\n  },\n\n  // Récupérer le token de rafraîchissement\n  getRefreshToken: () => {\n    return localStorage.getItem('refresh_token');\n  },\n\n  // Supprimer les tokens\n  clearTokens: () => {\n    localStorage.removeItem('access_token');\n    localStorage.removeItem('refresh_token');\n  },\n\n  // Vérifier si l'utilisateur est connecté\n  isAuthenticated: () => {\n    return !!localStorage.getItem('access_token');\n  },\n};\n\n// Service de gestion des données utilisateur\nexport const userService = {\n  // Sauvegarder les données utilisateur\n  saveUser: (user) => {\n    localStorage.setItem('user', JSON.stringify(user));\n  },\n\n  // Récupérer les données utilisateur\n  getUser: () => {\n    const user = localStorage.getItem('user');\n    return user ? JSON.parse(user) : null;\n  },\n\n  // Supprimer les données utilisateur\n  clearUser: () => {\n    localStorage.removeItem('user');\n  },\n};\n\n// Fonction utilitaire pour gérer les erreurs API\nexport const handleAPIError = (error) => {\n  if (error.response) {\n    // Erreur de réponse du serveur\n    const { status, data } = error.response;\n    \n    switch (status) {\n      case 400:\n        return {\n          type: 'validation',\n          message: data.error || 'Données invalides',\n          details: data\n        };\n      case 401:\n        return {\n          type: 'auth',\n          message: 'Non autorisé. Veuillez vous reconnecter.',\n        };\n      case 403:\n        return {\n          type: 'geographic',\n          message: data.error || 'Accès géographique refusé',\n          code: data.code\n        };\n      case 404:\n        return {\n          type: 'not_found',\n          message: 'Ressource non trouvée',\n        };\n      case 500:\n        return {\n          type: 'server',\n          message: 'Erreur serveur. Veuillez réessayer plus tard.',\n        };\n      default:\n        return {\n          type: 'unknown',\n          message: 'Une erreur inattendue s\\'est produite.',\n        };\n    }\n  } else if (error.request) {\n    // Erreur de réseau\n    return {\n      type: 'network',\n      message: 'Erreur de connexion. Vérifiez votre connexion internet.',\n    };\n  } else {\n    // Autre erreur\n    return {\n      type: 'unknown',\n      message: 'Une erreur inattendue s\\'est produite.',\n    };\n  }\n};\n\n// Fonction utilitaire pour valider les données de formulaire\nexport const validateFormData = (data, rules) => {\n  const errors = {};\n\n  Object.keys(rules).forEach(field => {\n    const value = data[field];\n    const fieldRules = rules[field];\n\n    // Vérification requise\n    if (fieldRules.required && (!value || value.trim() === '')) {\n      errors[field] = `${fieldRules.label || field} est requis`;\n      return;\n    }\n\n    // Vérification de longueur minimale\n    if (fieldRules.minLength && value && value.length < fieldRules.minLength) {\n      errors[field] = `${fieldRules.label || field} doit contenir au moins ${fieldRules.minLength} caractères`;\n    }\n\n    // Vérification de longueur maximale\n    if (fieldRules.maxLength && value && value.length > fieldRules.maxLength) {\n      errors[field] = `${fieldRules.label || field} ne peut pas dépasser ${fieldRules.maxLength} caractères`;\n    }\n\n    // Vérification d'email\n    if (fieldRules.email && value) {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(value)) {\n        errors[field] = 'Format d\\'email invalide';\n      }\n    }\n\n    // Vérification de correspondance\n    if (fieldRules.match && value !== data[fieldRules.match]) {\n      errors[field] = `${fieldRules.label || field} ne correspond pas`;\n    }\n  });\n\n  return errors;\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"/**\r\n * Utilitaires pour la gestion du temps dans les lives\r\n */\n\n/**\r\n * Formate une durée en secondes en format MM:SS\r\n * @param {number} seconds - Durée en secondes\r\n * @returns {string} - Durée formatée (ex: \"05:32\")\r\n */\nexport const formatTime = seconds => {\n  if (!seconds || seconds < 0) return '00:00';\n  const mins = Math.floor(seconds / 60);\n  const secs = Math.floor(seconds % 60);\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\n};\n\n/**\r\n * Formate une durée en secondes en format plus détaillé\r\n * @param {number} seconds - Durée en secondes\r\n * @returns {string} - Durée formatée (ex: \"1h 25m 32s\")\r\n */\nexport const formatDetailedTime = seconds => {\n  if (!seconds || seconds < 0) return '0s';\n  const hours = Math.floor(seconds / 3600);\n  const minutes = Math.floor(seconds % 3600 / 60);\n  const secs = Math.floor(seconds % 60);\n  if (hours > 0) {\n    return `${hours}h ${minutes.toString().padStart(2, '0')}m ${secs.toString().padStart(2, '0')}s`;\n  } else if (minutes > 0) {\n    return `${minutes}m ${secs.toString().padStart(2, '0')}s`;\n  } else {\n    return `${secs}s`;\n  }\n};\n\n/**\r\n * Calcule la durée depuis un timestamp de début\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @returns {number} - Durée en secondes\r\n */\nexport const calculateDuration = startTime => {\n  if (!startTime) return 0;\n  const start = new Date(startTime).getTime();\n  const now = Date.now();\n  return Math.floor((now - start) / 1000);\n};\n\n/**\r\n * Vérifie si un live est actif\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @param {string|Date} endTime - Timestamp de fin (optionnel)\r\n * @returns {boolean} - True si le live est actif\r\n */\nexport const isLiveActive = (startTime, endTime = null) => {\n  if (!startTime) return false;\n  const start = new Date(startTime).getTime();\n  const now = Date.now();\n\n  // Si pas de fin spécifiée, considérer comme actif\n  if (!endTime) return true;\n  const end = new Date(endTime).getTime();\n  return now >= start && now <= end;\n};\n\n/**\r\n * Génère un chronomètre en temps réel\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @param {function} callback - Fonction appelée avec la durée mise à jour\r\n * @returns {function} - Fonction pour arrêter le chronomètre\r\n */\nexport const createLiveTimer = (startTime, callback) => {\n  if (!startTime || !callback) return () => {};\n  const interval = setInterval(() => {\n    const duration = calculateDuration(startTime);\n    callback(duration);\n  }, 1000);\n  return () => clearInterval(interval);\n};","map":{"version":3,"names":["formatTime","seconds","mins","Math","floor","secs","toString","padStart","formatDetailedTime","hours","minutes","calculateDuration","startTime","start","Date","getTime","now","isLiveActive","endTime","end","createLiveTimer","callback","interval","setInterval","duration","clearInterval"],"sources":["C:/Users/DELL/Documents/mesProjets/CommuniConnect/frontend/src/utils/timeUtils.js"],"sourcesContent":["/**\r\n * Utilitaires pour la gestion du temps dans les lives\r\n */\r\n\r\n/**\r\n * Formate une durée en secondes en format MM:SS\r\n * @param {number} seconds - Durée en secondes\r\n * @returns {string} - Durée formatée (ex: \"05:32\")\r\n */\r\nexport const formatTime = (seconds) => {\r\n  if (!seconds || seconds < 0) return '00:00';\r\n  \r\n  const mins = Math.floor(seconds / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;\r\n};\r\n\r\n/**\r\n * Formate une durée en secondes en format plus détaillé\r\n * @param {number} seconds - Durée en secondes\r\n * @returns {string} - Durée formatée (ex: \"1h 25m 32s\")\r\n */\r\nexport const formatDetailedTime = (seconds) => {\r\n  if (!seconds || seconds < 0) return '0s';\r\n  \r\n  const hours = Math.floor(seconds / 3600);\r\n  const minutes = Math.floor((seconds % 3600) / 60);\r\n  const secs = Math.floor(seconds % 60);\r\n  \r\n  if (hours > 0) {\r\n    return `${hours}h ${minutes.toString().padStart(2, '0')}m ${secs.toString().padStart(2, '0')}s`;\r\n  } else if (minutes > 0) {\r\n    return `${minutes}m ${secs.toString().padStart(2, '0')}s`;\r\n  } else {\r\n    return `${secs}s`;\r\n  }\r\n};\r\n\r\n/**\r\n * Calcule la durée depuis un timestamp de début\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @returns {number} - Durée en secondes\r\n */\r\nexport const calculateDuration = (startTime) => {\r\n  if (!startTime) return 0;\r\n  \r\n  const start = new Date(startTime).getTime();\r\n  const now = Date.now();\r\n  return Math.floor((now - start) / 1000);\r\n};\r\n\r\n/**\r\n * Vérifie si un live est actif\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @param {string|Date} endTime - Timestamp de fin (optionnel)\r\n * @returns {boolean} - True si le live est actif\r\n */\r\nexport const isLiveActive = (startTime, endTime = null) => {\r\n  if (!startTime) return false;\r\n  \r\n  const start = new Date(startTime).getTime();\r\n  const now = Date.now();\r\n  \r\n  // Si pas de fin spécifiée, considérer comme actif\r\n  if (!endTime) return true;\r\n  \r\n  const end = new Date(endTime).getTime();\r\n  return now >= start && now <= end;\r\n};\r\n\r\n/**\r\n * Génère un chronomètre en temps réel\r\n * @param {string|Date} startTime - Timestamp de début\r\n * @param {function} callback - Fonction appelée avec la durée mise à jour\r\n * @returns {function} - Fonction pour arrêter le chronomètre\r\n */\r\nexport const createLiveTimer = (startTime, callback) => {\r\n  if (!startTime || !callback) return () => {};\r\n  \r\n  const interval = setInterval(() => {\r\n    const duration = calculateDuration(startTime);\r\n    callback(duration);\r\n  }, 1000);\r\n  \r\n  return () => clearInterval(interval);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
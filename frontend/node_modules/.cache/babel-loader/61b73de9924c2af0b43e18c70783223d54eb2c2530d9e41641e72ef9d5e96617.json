{"ast":null,"code":"import api from './api';\n\n// Service pour les médias\nexport const mediaAPI = {\n  // Uploader un média avec barre de progression\n  uploadMedia: async (formData, onProgress) => {\n    const config = {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      },\n      onUploadProgress: progressEvent => {\n        if (onProgress) {\n          const percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          onProgress(percentCompleted);\n        }\n      }\n    };\n    const response = await api.post('/posts/media/upload/', formData, config);\n    return response.data;\n  },\n  // Récupérer tous les médias\n  getMedia: async (params = {}) => {\n    const response = await api.get('/posts/media/', {\n      params\n    });\n    return response.data;\n  },\n  // Récupérer un média spécifique\n  getMediaById: async mediaId => {\n    const response = await api.get(`/posts/media/${mediaId}/`);\n    return response.data;\n  },\n  // Supprimer un média\n  deleteMedia: async mediaId => {\n    const response = await api.delete(`/posts/media/${mediaId}/`);\n    return response.data;\n  },\n  // Mettre à jour un média\n  updateMedia: async (mediaId, mediaData) => {\n    const response = await api.put(`/posts/media/${mediaId}/`, mediaData);\n    return response.data;\n  },\n  // Démarrer un live\n  startLive: async liveData => {\n    const response = await api.post('/posts/live/start/', liveData);\n    return response.data;\n  },\n  // Arrêter un live\n  stopLive: async liveId => {\n    const response = await api.put(`/posts/live/${liveId}/stop/`);\n    return response.data;\n  },\n  // Valider la durée d'une vidéo côté client\n  validateVideoDuration: file => {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      video.preload = 'metadata';\n      video.onloadedmetadata = () => {\n        window.URL.revokeObjectURL(video.src);\n        const duration = video.duration;\n        if (duration > 60) {\n          reject(new Error('La vidéo ne peut pas dépasser 60 secondes'));\n        } else {\n          resolve(duration);\n        }\n      };\n      video.onerror = () => {\n        reject(new Error('Impossible de lire la vidéo'));\n      };\n      video.src = URL.createObjectURL(file);\n    });\n  },\n  // Valider le type et la taille d'un fichier\n  validateFile: file => {\n    const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\n    const allowedVideoTypes = ['video/mp4', 'video/webm', 'video/quicktime', 'video/avi'];\n    const maxImageSize = 10 * 1024 * 1024; // 10MB\n    const maxVideoSize = 50 * 1024 * 1024; // 50MB\n\n    if (file.type.startsWith('image/')) {\n      if (!allowedImageTypes.includes(file.type)) {\n        throw new Error('Type d\\'image non supporté');\n      }\n      if (file.size > maxImageSize) {\n        throw new Error('Image trop volumineuse (max 10MB)');\n      }\n    } else if (file.type.startsWith('video/')) {\n      if (!allowedVideoTypes.includes(file.type)) {\n        throw new Error('Type de vidéo non supporté');\n      }\n      if (file.size > maxVideoSize) {\n        throw new Error('Vidéo trop volumineuse (max 50MB)');\n      }\n    } else {\n      throw new Error('Type de fichier non supporté');\n    }\n    return true;\n  },\n  // Créer une miniature pour une vidéo\n  createVideoThumbnail: videoFile => {\n    return new Promise((resolve, reject) => {\n      const video = document.createElement('video');\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      video.onloadedmetadata = () => {\n        // Prendre une capture à 1 seconde\n        video.currentTime = 1;\n      };\n      video.onseeked = () => {\n        canvas.width = video.videoWidth;\n        canvas.height = video.videoHeight;\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(blob => {\n          resolve(blob);\n        }, 'image/jpeg', 0.8);\n      };\n      video.onerror = () => {\n        reject(new Error('Impossible de créer la miniature'));\n      };\n      video.src = URL.createObjectURL(videoFile);\n    });\n  },\n  // Compresser une image\n  compressImage: (file, maxWidth = 1920, maxHeight = 1080, quality = 0.8) => {\n    return new Promise((resolve, reject) => {\n      const canvas = document.createElement('canvas');\n      const ctx = canvas.getContext('2d');\n      const img = new Image();\n      img.onload = () => {\n        // Calculer les nouvelles dimensions\n        let {\n          width,\n          height\n        } = img;\n        if (width > maxWidth) {\n          height = height * maxWidth / width;\n          width = maxWidth;\n        }\n        if (height > maxHeight) {\n          width = width * maxHeight / height;\n          height = maxHeight;\n        }\n        canvas.width = width;\n        canvas.height = height;\n\n        // Dessiner l'image redimensionnée\n        ctx.drawImage(img, 0, 0, width, height);\n\n        // Convertir en blob\n        canvas.toBlob(blob => {\n          resolve(new File([blob], file.name, {\n            type: file.type,\n            lastModified: Date.now()\n          }));\n        }, file.type, quality);\n      };\n      img.onerror = () => {\n        reject(new Error('Impossible de charger l\\'image'));\n      };\n      img.src = URL.createObjectURL(file);\n    });\n  },\n  // Obtenir les informations d'un fichier\n  getFileInfo: file => {\n    return {\n      name: file.name,\n      size: file.size,\n      type: file.type,\n      lastModified: file.lastModified,\n      sizeInMB: (file.size / 1024 / 1024).toFixed(2)\n    };\n  }\n};","map":{"version":3,"names":["api","mediaAPI","uploadMedia","formData","onProgress","config","headers","onUploadProgress","progressEvent","percentCompleted","Math","round","loaded","total","response","post","data","getMedia","params","get","getMediaById","mediaId","deleteMedia","delete","updateMedia","mediaData","put","startLive","liveData","stopLive","liveId","validateVideoDuration","file","Promise","resolve","reject","video","document","createElement","preload","onloadedmetadata","window","URL","revokeObjectURL","src","duration","Error","onerror","createObjectURL","validateFile","allowedImageTypes","allowedVideoTypes","maxImageSize","maxVideoSize","type","startsWith","includes","size","createVideoThumbnail","videoFile","canvas","ctx","getContext","currentTime","onseeked","width","videoWidth","height","videoHeight","drawImage","toBlob","blob","compressImage","maxWidth","maxHeight","quality","img","Image","onload","File","name","lastModified","Date","now","getFileInfo","sizeInMB","toFixed"],"sources":["C:/Users/DELL/Documents/mesProjets/CommuniConnect/frontend/src/services/mediaAPI.js"],"sourcesContent":["import api from './api';\r\n\r\n// Service pour les médias\r\nexport const mediaAPI = {\r\n  // Uploader un média avec barre de progression\r\n  uploadMedia: async (formData, onProgress) => {\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n      onUploadProgress: (progressEvent) => {\r\n        if (onProgress) {\r\n          const percentCompleted = Math.round(\r\n            (progressEvent.loaded * 100) / progressEvent.total\r\n          );\r\n          onProgress(percentCompleted);\r\n        }\r\n      },\r\n    };\r\n    \r\n    const response = await api.post('/posts/media/upload/', formData, config);\r\n    return response.data;\r\n  },\r\n\r\n  // Récupérer tous les médias\r\n  getMedia: async (params = {}) => {\r\n    const response = await api.get('/posts/media/', { params });\r\n    return response.data;\r\n  },\r\n\r\n  // Récupérer un média spécifique\r\n  getMediaById: async (mediaId) => {\r\n    const response = await api.get(`/posts/media/${mediaId}/`);\r\n    return response.data;\r\n  },\r\n\r\n  // Supprimer un média\r\n  deleteMedia: async (mediaId) => {\r\n    const response = await api.delete(`/posts/media/${mediaId}/`);\r\n    return response.data;\r\n  },\r\n\r\n  // Mettre à jour un média\r\n  updateMedia: async (mediaId, mediaData) => {\r\n    const response = await api.put(`/posts/media/${mediaId}/`, mediaData);\r\n    return response.data;\r\n  },\r\n\r\n  // Démarrer un live\r\n  startLive: async (liveData) => {\r\n    const response = await api.post('/posts/live/start/', liveData);\r\n    return response.data;\r\n  },\r\n\r\n  // Arrêter un live\r\n  stopLive: async (liveId) => {\r\n    const response = await api.put(`/posts/live/${liveId}/stop/`);\r\n    return response.data;\r\n  },\r\n\r\n  // Valider la durée d'une vidéo côté client\r\n  validateVideoDuration: (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      const video = document.createElement('video');\r\n      video.preload = 'metadata';\r\n      \r\n      video.onloadedmetadata = () => {\r\n        window.URL.revokeObjectURL(video.src);\r\n        const duration = video.duration;\r\n        \r\n        if (duration > 60) {\r\n          reject(new Error('La vidéo ne peut pas dépasser 60 secondes'));\r\n        } else {\r\n          resolve(duration);\r\n        }\r\n      };\r\n      \r\n      video.onerror = () => {\r\n        reject(new Error('Impossible de lire la vidéo'));\r\n      };\r\n      \r\n      video.src = URL.createObjectURL(file);\r\n    });\r\n  },\r\n\r\n  // Valider le type et la taille d'un fichier\r\n  validateFile: (file) => {\r\n    const allowedImageTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/gif', 'image/webp'];\r\n    const allowedVideoTypes = ['video/mp4', 'video/webm', 'video/quicktime', 'video/avi'];\r\n    \r\n    const maxImageSize = 10 * 1024 * 1024; // 10MB\r\n    const maxVideoSize = 50 * 1024 * 1024; // 50MB\r\n    \r\n    if (file.type.startsWith('image/')) {\r\n      if (!allowedImageTypes.includes(file.type)) {\r\n        throw new Error('Type d\\'image non supporté');\r\n      }\r\n      if (file.size > maxImageSize) {\r\n        throw new Error('Image trop volumineuse (max 10MB)');\r\n      }\r\n    } else if (file.type.startsWith('video/')) {\r\n      if (!allowedVideoTypes.includes(file.type)) {\r\n        throw new Error('Type de vidéo non supporté');\r\n      }\r\n      if (file.size > maxVideoSize) {\r\n        throw new Error('Vidéo trop volumineuse (max 50MB)');\r\n      }\r\n    } else {\r\n      throw new Error('Type de fichier non supporté');\r\n    }\r\n    \r\n    return true;\r\n  },\r\n\r\n  // Créer une miniature pour une vidéo\r\n  createVideoThumbnail: (videoFile) => {\r\n    return new Promise((resolve, reject) => {\r\n      const video = document.createElement('video');\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      \r\n      video.onloadedmetadata = () => {\r\n        // Prendre une capture à 1 seconde\r\n        video.currentTime = 1;\r\n      };\r\n      \r\n      video.onseeked = () => {\r\n        canvas.width = video.videoWidth;\r\n        canvas.height = video.videoHeight;\r\n        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n        \r\n        canvas.toBlob((blob) => {\r\n          resolve(blob);\r\n        }, 'image/jpeg', 0.8);\r\n      };\r\n      \r\n      video.onerror = () => {\r\n        reject(new Error('Impossible de créer la miniature'));\r\n      };\r\n      \r\n      video.src = URL.createObjectURL(videoFile);\r\n    });\r\n  },\r\n\r\n  // Compresser une image\r\n  compressImage: (file, maxWidth = 1920, maxHeight = 1080, quality = 0.8) => {\r\n    return new Promise((resolve, reject) => {\r\n      const canvas = document.createElement('canvas');\r\n      const ctx = canvas.getContext('2d');\r\n      const img = new Image();\r\n      \r\n      img.onload = () => {\r\n        // Calculer les nouvelles dimensions\r\n        let { width, height } = img;\r\n        \r\n        if (width > maxWidth) {\r\n          height = (height * maxWidth) / width;\r\n          width = maxWidth;\r\n        }\r\n        \r\n        if (height > maxHeight) {\r\n          width = (width * maxHeight) / height;\r\n          height = maxHeight;\r\n        }\r\n        \r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        \r\n        // Dessiner l'image redimensionnée\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n        \r\n        // Convertir en blob\r\n        canvas.toBlob((blob) => {\r\n          resolve(new File([blob], file.name, {\r\n            type: file.type,\r\n            lastModified: Date.now(),\r\n          }));\r\n        }, file.type, quality);\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        reject(new Error('Impossible de charger l\\'image'));\r\n      };\r\n      \r\n      img.src = URL.createObjectURL(file);\r\n    });\r\n  },\r\n\r\n  // Obtenir les informations d'un fichier\r\n  getFileInfo: (file) => {\r\n    return {\r\n      name: file.name,\r\n      size: file.size,\r\n      type: file.type,\r\n      lastModified: file.lastModified,\r\n      sizeInMB: (file.size / 1024 / 1024).toFixed(2),\r\n    };\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
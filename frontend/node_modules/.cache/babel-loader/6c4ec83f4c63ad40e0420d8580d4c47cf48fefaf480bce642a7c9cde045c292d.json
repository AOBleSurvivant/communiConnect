{"ast":null,"code":"import api from './api';\nconst NOTIFICATIONS_API = '/notifications/';\nexport const notificationsAPI = {\n  // Récupérer toutes les notifications\n  getNotifications: async (page = 1, pageSize = 20) => {\n    try {\n      const response = await api.get(`${NOTIFICATIONS_API}`, {\n        params: {\n          page,\n          page_size: pageSize\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des notifications:', error);\n      throw error;\n    }\n  },\n  // Récupérer les notifications non lues\n  getUnreadNotifications: async () => {\n    try {\n      const response = await api.get(`${NOTIFICATIONS_API}`, {\n        params: {\n          unread: true\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des notifications non lues:', error);\n      throw error;\n    }\n  },\n  // Marquer une notification comme lue\n  markAsRead: async notificationId => {\n    try {\n      const response = await api.patch(`${NOTIFICATIONS_API}${notificationId}/mark-read/`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors du marquage de la notification:', error);\n      throw error;\n    }\n  },\n  // Marquer toutes les notifications comme lues\n  markAllAsRead: async () => {\n    try {\n      const response = await api.patch(`${NOTIFICATIONS_API}mark-all-read/`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors du marquage de toutes les notifications:', error);\n      throw error;\n    }\n  },\n  // Supprimer une notification\n  deleteNotification: async notificationId => {\n    try {\n      const response = await api.delete(`${NOTIFICATIONS_API}${notificationId}/`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la suppression de la notification:', error);\n      throw error;\n    }\n  },\n  // Récupérer les préférences de notifications\n  getNotificationPreferences: async () => {\n    try {\n      const response = await api.get(`${NOTIFICATIONS_API}preferences/`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des préférences:', error);\n      throw error;\n    }\n  },\n  // Mettre à jour les préférences de notifications\n  updateNotificationPreferences: async preferences => {\n    try {\n      const response = await api.patch(`${NOTIFICATIONS_API}preferences/`, preferences);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des préférences:', error);\n      throw error;\n    }\n  },\n  // Récupérer le nombre de notifications non lues\n  getUnreadCount: async () => {\n    try {\n      const response = await api.get(`${NOTIFICATIONS_API}count/`);\n      return response.data;\n    } catch (error) {\n      console.error('Erreur lors de la récupération du nombre de notifications:', error);\n      throw error;\n    }\n  }\n};\nexport default notificationsAPI;","map":{"version":3,"names":["api","NOTIFICATIONS_API","notificationsAPI","getNotifications","page","pageSize","response","get","params","page_size","data","error","console","getUnreadNotifications","unread","markAsRead","notificationId","patch","markAllAsRead","deleteNotification","delete","getNotificationPreferences","updateNotificationPreferences","preferences","getUnreadCount"],"sources":["C:/Users/DELL/Documents/mesProjets/CommuniConnect/frontend/src/services/notificationsAPI.js"],"sourcesContent":["import api from './api';\r\n\r\nconst NOTIFICATIONS_API = '/notifications/';\r\n\r\nexport const notificationsAPI = {\r\n  // Récupérer toutes les notifications\r\n  getNotifications: async (page = 1, pageSize = 20) => {\r\n    try {\r\n      const response = await api.get(`${NOTIFICATIONS_API}`, {\r\n        params: { page, page_size: pageSize }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des notifications:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Récupérer les notifications non lues\r\n  getUnreadNotifications: async () => {\r\n    try {\r\n      const response = await api.get(`${NOTIFICATIONS_API}`, {\r\n        params: { unread: true }\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des notifications non lues:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Marquer une notification comme lue\r\n  markAsRead: async (notificationId) => {\r\n    try {\r\n      const response = await api.patch(`${NOTIFICATIONS_API}${notificationId}/mark-read/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors du marquage de la notification:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Marquer toutes les notifications comme lues\r\n  markAllAsRead: async () => {\r\n    try {\r\n      const response = await api.patch(`${NOTIFICATIONS_API}mark-all-read/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors du marquage de toutes les notifications:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Supprimer une notification\r\n  deleteNotification: async (notificationId) => {\r\n    try {\r\n      const response = await api.delete(`${NOTIFICATIONS_API}${notificationId}/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la suppression de la notification:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Récupérer les préférences de notifications\r\n  getNotificationPreferences: async () => {\r\n    try {\r\n      const response = await api.get(`${NOTIFICATIONS_API}preferences/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération des préférences:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Mettre à jour les préférences de notifications\r\n  updateNotificationPreferences: async (preferences) => {\r\n    try {\r\n      const response = await api.patch(`${NOTIFICATIONS_API}preferences/`, preferences);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la mise à jour des préférences:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Récupérer le nombre de notifications non lues\r\n  getUnreadCount: async () => {\r\n    try {\r\n      const response = await api.get(`${NOTIFICATIONS_API}count/`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Erreur lors de la récupération du nombre de notifications:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default notificationsAPI; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Documents\\\\mesProjets\\\\CommuniConnect\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI, tokenService, userService, handleAPIError } from '../services/api';\nimport toast from 'react-hot-toast';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Vérifier l'authentification au chargement\n  useEffect(() => {\n    checkAuthStatus();\n  }, []);\n  const checkAuthStatus = () => {\n    try {\n      const token = tokenService.getAccessToken();\n      const savedUser = userService.getUser();\n      if (token && savedUser) {\n        setUser(savedUser);\n        setIsAuthenticated(true);\n      } else {\n        // Nettoyer les données si pas de token\n        logout();\n      }\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'authentification:', error);\n      logout();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      const response = await authAPI.register(userData);\n\n      // Sauvegarder les tokens et les données utilisateur\n      tokenService.saveTokens(response.tokens);\n      userService.saveUser(response.user);\n      setUser(response.user);\n      setIsAuthenticated(true);\n      toast.success(response.message || 'Inscription réussie !');\n      return response;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      if (errorInfo.type === 'geographic') {\n        toast.error('Accès refusé. CommuniConnect est réservé aux habitants de Guinée.');\n      } else if (errorInfo.type === 'validation') {\n        // Afficher les erreurs de validation spécifiques\n        if (errorInfo.details) {\n          Object.keys(errorInfo.details).forEach(field => {\n            if (Array.isArray(errorInfo.details[field])) {\n              toast.error(errorInfo.details[field][0]);\n            } else {\n              toast.error(errorInfo.details[field]);\n            }\n          });\n        } else {\n          toast.error(errorInfo.message);\n        }\n      } else {\n        toast.error(errorInfo.message);\n      }\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authAPI.login(email, password);\n\n      // Sauvegarder les tokens et les données utilisateur\n      tokenService.saveTokens(response.tokens);\n      userService.saveUser(response.user);\n      setUser(response.user);\n      setIsAuthenticated(true);\n      toast.success(response.message || 'Connexion réussie !');\n      return response;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      if (errorInfo.type === 'geographic') {\n        toast.error('Accès refusé. Vous devez être en Guinée pour vous connecter.');\n      } else if (errorInfo.type === 'auth') {\n        toast.error('Email ou mot de passe incorrect.');\n      } else {\n        toast.error(errorInfo.message);\n      }\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = async () => {\n    try {\n      // Appeler l'API de déconnexion si l'utilisateur est connecté\n      if (isAuthenticated) {\n        await authAPI.logout();\n      }\n    } catch (error) {\n      console.error('Erreur lors de la déconnexion:', error);\n    } finally {\n      // Nettoyer les données locales\n      tokenService.clearTokens();\n      userService.clearUser();\n      setUser(null);\n      setIsAuthenticated(false);\n      toast.success('Déconnexion réussie');\n    }\n  };\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      const response = await authAPI.updateProfile(profileData);\n\n      // Mettre à jour les données utilisateur\n      userService.saveUser(response.user);\n      setUser(response.user);\n      toast.success(response.message || 'Profil mis à jour avec succès !');\n      return response;\n    } catch (error) {\n      const errorInfo = handleAPIError(error);\n      toast.error(errorInfo.message);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const refreshUserData = async () => {\n    try {\n      const response = await authAPI.getProfile();\n      userService.saveUser(response);\n      setUser(response);\n      return response;\n    } catch (error) {\n      var _error$response;\n      console.error('Erreur lors du rafraîchissement des données utilisateur:', error);\n      // Si l'erreur est 401, déconnecter l'utilisateur\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        logout();\n      }\n      throw error;\n    }\n  };\n  const value = {\n    user,\n    loading,\n    isAuthenticated,\n    register,\n    login,\n    logout,\n    updateProfile,\n    refreshUserData\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 192,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","tokenService","userService","handleAPIError","toast","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","checkAuthStatus","token","getAccessToken","savedUser","getUser","logout","error","console","register","userData","response","saveTokens","tokens","saveUser","success","message","errorInfo","type","details","Object","keys","forEach","field","Array","isArray","login","email","password","clearTokens","clearUser","updateProfile","profileData","refreshUserData","getProfile","_error$response","status","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Documents/mesProjets/CommuniConnect/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI, tokenService, userService, handleAPIError } from '../services/api';\r\nimport toast from 'react-hot-toast';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Vérifier l'authentification au chargement\r\n  useEffect(() => {\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const checkAuthStatus = () => {\r\n    try {\r\n      const token = tokenService.getAccessToken();\r\n      const savedUser = userService.getUser();\r\n      \r\n      if (token && savedUser) {\r\n        setUser(savedUser);\r\n        setIsAuthenticated(true);\r\n      } else {\r\n        // Nettoyer les données si pas de token\r\n        logout();\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la vérification de l\\'authentification:', error);\r\n      logout();\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await authAPI.register(userData);\r\n      \r\n      // Sauvegarder les tokens et les données utilisateur\r\n      tokenService.saveTokens(response.tokens);\r\n      userService.saveUser(response.user);\r\n      \r\n      setUser(response.user);\r\n      setIsAuthenticated(true);\r\n      \r\n      toast.success(response.message || 'Inscription réussie !');\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      const errorInfo = handleAPIError(error);\r\n      \r\n      if (errorInfo.type === 'geographic') {\r\n        toast.error('Accès refusé. CommuniConnect est réservé aux habitants de Guinée.');\r\n      } else if (errorInfo.type === 'validation') {\r\n        // Afficher les erreurs de validation spécifiques\r\n        if (errorInfo.details) {\r\n          Object.keys(errorInfo.details).forEach(field => {\r\n            if (Array.isArray(errorInfo.details[field])) {\r\n              toast.error(errorInfo.details[field][0]);\r\n            } else {\r\n              toast.error(errorInfo.details[field]);\r\n            }\r\n          });\r\n        } else {\r\n          toast.error(errorInfo.message);\r\n        }\r\n      } else {\r\n        toast.error(errorInfo.message);\r\n      }\r\n      \r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await authAPI.login(email, password);\r\n      \r\n      // Sauvegarder les tokens et les données utilisateur\r\n      tokenService.saveTokens(response.tokens);\r\n      userService.saveUser(response.user);\r\n      \r\n      setUser(response.user);\r\n      setIsAuthenticated(true);\r\n      \r\n      toast.success(response.message || 'Connexion réussie !');\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      const errorInfo = handleAPIError(error);\r\n      \r\n      if (errorInfo.type === 'geographic') {\r\n        toast.error('Accès refusé. Vous devez être en Guinée pour vous connecter.');\r\n      } else if (errorInfo.type === 'auth') {\r\n        toast.error('Email ou mot de passe incorrect.');\r\n      } else {\r\n        toast.error(errorInfo.message);\r\n      }\r\n      \r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      // Appeler l'API de déconnexion si l'utilisateur est connecté\r\n      if (isAuthenticated) {\r\n        await authAPI.logout();\r\n      }\r\n    } catch (error) {\r\n      console.error('Erreur lors de la déconnexion:', error);\r\n    } finally {\r\n      // Nettoyer les données locales\r\n      tokenService.clearTokens();\r\n      userService.clearUser();\r\n      \r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      \r\n      toast.success('Déconnexion réussie');\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      const response = await authAPI.updateProfile(profileData);\r\n      \r\n      // Mettre à jour les données utilisateur\r\n      userService.saveUser(response.user);\r\n      setUser(response.user);\r\n      \r\n      toast.success(response.message || 'Profil mis à jour avec succès !');\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      const errorInfo = handleAPIError(error);\r\n      toast.error(errorInfo.message);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshUserData = async () => {\r\n    try {\r\n      const response = await authAPI.getProfile();\r\n      userService.saveUser(response);\r\n      setUser(response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Erreur lors du rafraîchissement des données utilisateur:', error);\r\n      // Si l'erreur est 401, déconnecter l'utilisateur\r\n      if (error.response?.status === 401) {\r\n        logout();\r\n      }\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    loading,\r\n    isAuthenticated,\r\n    register,\r\n    login,\r\n    logout,\r\n    updateProfile,\r\n    refreshUserData,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
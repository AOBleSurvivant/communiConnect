// Script de test complet pour les alertes
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:3000

console.log('üß™ Test Complet Alertes - CommuniConnect');

// Fonction pour tester la cr√©ation d'alerte depuis le composant React
async function testReactAlertCreation() {
    console.log('üß™ Test de cr√©ation d\'alerte depuis React...');
    
    // V√©rifier l'authentification
    const token = localStorage.getItem('access_token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) {
        console.error('‚ùå Utilisateur non connect√©');
        console.log('Ex√©cutez forceLogin() d\'abord');
        return;
    }
    
    console.log('‚úÖ Utilisateur connect√©');
    
    // Simuler les donn√©es du formulaire React
    const formData = {
        title: 'Test d\'alerte - Fuite de gaz',
        description: 'Fuite de gaz d√©tect√©e dans le quartier. Odeur forte dans la rue principale.',
        category: 'gas_leak',
        latitude: 48.8566,
        longitude: 2.3522,
        address: '123 Rue de la Paix',
        neighborhood: 'Centre-ville',
        city: 'Paris',
        postal_code: '75001'
    };
    
    console.log('üìù Donn√©es du formulaire:', formData);
    
    try {
        // Appel √† l'API d'alertes
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(formData)
        });
        
        console.log('üì° Status de la r√©ponse:', response.status);
        const data = await response.json();
        console.log('üìÑ R√©ponse compl√®te:', data);
        
        if (response.ok) {
            console.log('‚úÖ Alerte cr√©√©e avec succ√®s!');
            console.log('üÜî ID de l\'alerte:', data.alert_id);
            console.log('üìÖ Date de cr√©ation:', data.created_at);
            
            // Tester la r√©cup√©ration de l'alerte
            await testGetAlert(data.alert_id);
            
        } else {
            console.error('‚ùå Erreur cr√©ation alerte');
            console.error('D√©tails:', data);
            
            // Afficher les erreurs sp√©cifiques
            if (data.detail) {
                console.error('Erreur d√©taill√©e:', data.detail);
            }
            if (data.errors) {
                console.error('Erreurs de validation:', data.errors);
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur r√©seau:', error);
    }
}

// Fonction pour r√©cup√©rer une alerte sp√©cifique
async function testGetAlert(alertId) {
    console.log(`üß™ Test de r√©cup√©ration de l'alerte ${alertId}...`);
    
    const token = localStorage.getItem('access_token');
    
    try {
        const response = await fetch(`http://localhost:8000/api/notifications/alerts/${alertId}/`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('üì° Status r√©cup√©ration:', response.status);
        const data = await response.json();
        
        if (response.ok) {
            console.log('‚úÖ Alerte r√©cup√©r√©e avec succ√®s');
            console.log('üìÑ D√©tails de l\'alerte:', data);
        } else {
            console.error('‚ùå Erreur r√©cup√©ration alerte:', data);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration alerte:', error);
    }
}

// Fonction pour tester la r√©cup√©ration de toutes les alertes
async function testGetAllAlerts() {
    console.log('üß™ Test de r√©cup√©ration de toutes les alertes...');
    
    const token = localStorage.getItem('access_token');
    
    try {
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        console.log('üì° Status r√©cup√©ration:', response.status);
        const data = await response.json();
        
        if (response.ok) {
            const alerts = data.results || data;
            console.log(`‚úÖ ${alerts.length} alertes r√©cup√©r√©es`);
            
            alerts.forEach((alert, index) => {
                console.log(`üìã Alerte ${index + 1}:`, {
                    id: alert.alert_id,
                    title: alert.title,
                    category: alert.category,
                    created_at: alert.created_at
                });
            });
        } else {
            console.error('‚ùå Erreur r√©cup√©ration alertes:', data);
        }
        
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration alertes:', error);
    }
}

// Fonction pour tester les cat√©gories d'alertes
async function testAlertCategories() {
    console.log('üß™ Test des cat√©gories d\'alertes...');
    
    const categories = [
        'gas_leak',
        'fire',
        'flood',
        'power_outage',
        'road_accident',
        'medical_emergency',
        'security_incident',
        'weather_warning',
        'other'
    ];
    
    console.log('üìã Cat√©gories disponibles:', categories);
    
    // Tester la cr√©ation d'une alerte de chaque cat√©gorie
    for (const category of categories.slice(0, 3)) { // Tester seulement les 3 premi√®res
        console.log(`üß™ Test cr√©ation alerte cat√©gorie: ${category}`);
        
        const alertData = {
            title: `Test ${category} - Alerte de test`,
            description: `Description de test pour la cat√©gorie ${category}`,
            category: category,
            latitude: 48.8566,
            longitude: 2.3522,
            address: '123 Rue de la Paix',
            neighborhood: 'Centre-ville',
            city: 'Paris',
            postal_code: '75001'
        };
        
        await createTestAlert(alertData);
        
        // Attendre un peu entre chaque cr√©ation
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
}

// Fonction pour cr√©er une alerte de test
async function createTestAlert(alertData) {
    const token = localStorage.getItem('access_token');
    
    try {
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(alertData)
        });
        
        const data = await response.json();
        
        if (response.ok) {
            console.log(`‚úÖ Alerte ${alertData.category} cr√©√©e:`, data.alert_id);
        } else {
            console.error(`‚ùå Erreur cr√©ation alerte ${alertData.category}:`, data);
        }
        
    } catch (error) {
        console.error(`‚ùå Erreur cr√©ation alerte ${alertData.category}:`, error);
    }
}

// Fonction pour nettoyer les alertes de test
async function cleanupTestAlerts() {
    console.log('üßπ Nettoyage des alertes de test...');
    
    const token = localStorage.getItem('access_token');
    
    try {
        // R√©cup√©rer toutes les alertes
        const response = await fetch('http://localhost:8000/api/notifications/alerts/', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });
        
        const data = await response.json();
        
        if (response.ok) {
            const alerts = data.results || data;
            console.log(`üìã ${alerts.length} alertes trouv√©es`);
            
            // Supprimer les alertes de test (avec "Test" dans le titre)
            for (const alert of alerts) {
                if (alert.title && alert.title.includes('Test')) {
                    console.log(`üóëÔ∏è Suppression de l'alerte: ${alert.title}`);
                    
                    const deleteResponse = await fetch(`http://localhost:8000/api/notifications/alerts/${alert.alert_id}/`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    });
                    
                    if (deleteResponse.ok) {
                        console.log(`‚úÖ Alerte supprim√©e: ${alert.alert_id}`);
                    } else {
                        console.error(`‚ùå Erreur suppression alerte: ${alert.alert_id}`);
                    }
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur nettoyage:', error);
    }
}

// Fonction principale
function runCompleteTest() {
    console.log('üöÄ D√©marrage du test complet...');
    
    // V√©rifier l'authentification
    const token = localStorage.getItem('access_token');
    const user = localStorage.getItem('user');
    
    if (!token || !user) {
        console.log('‚ùå Utilisateur non connect√©');
        console.log('Ex√©cutez forceLogin() d\'abord');
        return;
    }
    
    console.log('‚úÖ Utilisateur connect√©, d√©but des tests...');
    
    // Ex√©cuter les tests
    testReactAlertCreation();
    
    console.log('\nüìã Commandes disponibles:');
    console.log('- testReactAlertCreation() : Test cr√©ation alerte React');
    console.log('- testGetAllAlerts() : R√©cup√©rer toutes les alertes');
    console.log('- testAlertCategories() : Tester toutes les cat√©gories');
    console.log('- cleanupTestAlerts() : Nettoyer les alertes de test');
}

// Ex√©cuter automatiquement
runCompleteTest(); 
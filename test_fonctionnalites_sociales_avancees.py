#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test des Fonctionnalit√©s Sociales Avanc√©es - CommuniConnect
Test complet des nouvelles fonctionnalit√©s de groupes, √©v√©nements et gamification
"""

import requests
import json
import time
from datetime import datetime, timedelta

# Configuration
API_URL = "http://localhost:8000/api"
TEST_USER_EMAIL = "test_social_avance@example.com"
TEST_USER_PASSWORD = "Test123!"

class SocialFeaturesAdvancedTester:
    def __init__(self):
        self.session = requests.Session()
        self.token = None
        self.user_id = None
        
    def print_header(self, title):
        print(f"\n{'='*60}")
        print(f"üöÄ {title}")
        print(f"{'='*60}")
    
    def print_success(self, message):
        print(f"‚úÖ {message}")
    
    def print_error(self, message):
        print(f"‚ùå {message}")
    
    def print_warning(self, message):
        print(f"‚ö†Ô∏è  {message}")
    
    def print_info(self, message):
        print(f"‚ÑπÔ∏è  {message}")
    
    def test_server_connection(self):
        """Test de connexion au serveur"""
        self.print_header("Test de Connexion au Serveur")
        
        try:
            # Tester avec un endpoint qui existe
            response = self.session.get(f"{API_URL}/users/register/")
            if response.status_code in [200, 405]:  # 405 = Method Not Allowed (endpoint existe)
                self.print_success("Serveur accessible")
                return True
            else:
                self.print_error(f"Erreur serveur: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"Impossible de se connecter au serveur: {e}")
            return False
    
    def create_test_user(self):
        """Cr√©er un utilisateur de test"""
        self.print_header("Cr√©ation Utilisateur de Test")
        
        user_data = {
            "username": "test_social_avance",
            "email": TEST_USER_EMAIL,
            "password": TEST_USER_PASSWORD,
            "first_name": "Test",
            "last_name": "Social",
            "quartier": 1  # Premier quartier disponible
        }
        
        try:
            response = self.session.post(f"{API_URL}/users/register/", json=user_data)
            if response.status_code == 201:
                self.print_success("Utilisateur cr√©√© avec succ√®s")
                return True
            elif response.status_code == 400:
                self.print_warning("Utilisateur existe d√©j√†, tentative de connexion")
                return self.login_test_user()
            else:
                self.print_error(f"Erreur cr√©ation utilisateur: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"Erreur lors de la cr√©ation: {e}")
            return False
    
    def login_test_user(self):
        """Connexion de l'utilisateur de test"""
        self.print_header("Connexion Utilisateur de Test")
        
        login_data = {
            "email": TEST_USER_EMAIL,
            "password": TEST_USER_PASSWORD
        }
        
        try:
            response = self.session.post(f"{API_URL}/users/login/", json=login_data)
            if response.status_code == 200:
                data = response.json()
                self.token = data.get('access')
                self.user_id = data.get('user', {}).get('id')
                self.session.headers.update({'Authorization': f'Bearer {self.token}'})
                self.print_success("Connexion r√©ussie")
                return True
            else:
                self.print_error(f"Erreur connexion: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"Erreur lors de la connexion: {e}")
            return False
    
    def test_groups_functionality(self):
        """Test des fonctionnalit√©s de groupes"""
        self.print_header("Test des Fonctionnalit√©s de Groupes")
        
        # Test 1: Lister les groupes
        try:
            response = self.session.get(f"{API_URL}/users/groups/")
            if response.status_code == 200:
                groups = response.json()
                self.print_success(f"Liste des groupes r√©cup√©r√©e ({len(groups)} groupes)")
            else:
                self.print_error(f"Erreur liste groupes: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des groupes: {e}")
        
        # Test 2: Cr√©er un groupe
        group_data = {
            "name": "Groupe Test Social",
            "description": "Groupe de test pour les fonctionnalit√©s sociales avanc√©es",
            "group_type": "community",
            "privacy_level": "public",
            "quartier": 1
        }
        
        try:
            response = self.session.post(f"{API_URL}/users/groups/", json=group_data)
            if response.status_code == 201:
                group = response.json()
                self.print_success(f"Groupe cr√©√©: {group['name']}")
                group_id = group['id']
                
                # Test 3: Rejoindre le groupe
                join_data = {"group_id": group_id}
                response = self.session.post(f"{API_URL}/users/groups/join/", json=join_data)
                if response.status_code == 201:
                    self.print_success("Adh√©sion au groupe r√©ussie")
                else:
                    self.print_warning(f"Erreur adh√©sion groupe: {response.status_code}")
                
                # Test 4: Lister les membres du groupe
                response = self.session.get(f"{API_URL}/users/groups/{group_id}/members/")
                if response.status_code == 200:
                    members = response.json()
                    self.print_success(f"Membres du groupe r√©cup√©r√©s ({len(members)} membres)")
                else:
                    self.print_warning(f"Erreur liste membres: {response.status_code}")
                
            else:
                self.print_error(f"Erreur cr√©ation groupe: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la cr√©ation du groupe: {e}")
        
        # Test 5: Suggestions de groupes
        try:
            response = self.session.get(f"{API_URL}/users/suggested-groups/")
            if response.status_code == 200:
                suggestions = response.json()
                self.print_success(f"Suggestions de groupes r√©cup√©r√©es ({len(suggestions)} suggestions)")
            else:
                self.print_warning(f"Erreur suggestions groupes: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des suggestions: {e}")
    
    def test_events_functionality(self):
        """Test des fonctionnalit√©s d'√©v√©nements"""
        self.print_header("Test des Fonctionnalit√©s d'√âv√©nements")
        
        # Test 1: Lister les √©v√©nements
        try:
            response = self.session.get(f"{API_URL}/users/events/")
            if response.status_code == 200:
                events = response.json()
                self.print_success(f"Liste des √©v√©nements r√©cup√©r√©e ({len(events)} √©v√©nements)")
            else:
                self.print_error(f"Erreur liste √©v√©nements: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des √©v√©nements: {e}")
        
        # Test 2: Cr√©er un √©v√©nement
        event_data = {
            "title": "√âv√©nement Test Social",
            "description": "√âv√©nement de test pour les fonctionnalit√©s sociales avanc√©es",
            "event_type": "meeting",
            "start_date": (datetime.now() + timedelta(days=7)).isoformat(),
            "end_date": (datetime.now() + timedelta(days=7, hours=2)).isoformat(),
            "quartier": 1,
            "location_details": "Salle de r√©union du quartier",
            "is_public": True,
            "max_attendees": 50
        }
        
        try:
            response = self.session.post(f"{API_URL}/users/events/", json=event_data)
            if response.status_code == 201:
                event = response.json()
                self.print_success(f"√âv√©nement cr√©√©: {event['title']}")
                event_id = event['id']
                
                # Test 3: Participer √† l'√©v√©nement
                join_data = {"event_id": event_id}
                response = self.session.post(f"{API_URL}/users/events/join/", json=join_data)
                if response.status_code == 201:
                    self.print_success("Participation √† l'√©v√©nement confirm√©e")
                else:
                    self.print_warning(f"Erreur participation √©v√©nement: {response.status_code}")
                
                # Test 4: Lister les participants
                response = self.session.get(f"{API_URL}/users/events/{event_id}/attendees/")
                if response.status_code == 200:
                    attendees = response.json()
                    self.print_success(f"Participants r√©cup√©r√©s ({len(attendees)} participants)")
                else:
                    self.print_warning(f"Erreur liste participants: {response.status_code}")
                
            else:
                self.print_error(f"Erreur cr√©ation √©v√©nement: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la cr√©ation de l'√©v√©nement: {e}")
        
        # Test 5: Suggestions d'√©v√©nements
        try:
            response = self.session.get(f"{API_URL}/users/suggested-events/")
            if response.status_code == 200:
                suggestions = response.json()
                self.print_success(f"Suggestions d'√©v√©nements r√©cup√©r√©es ({len(suggestions)} suggestions)")
            else:
                self.print_warning(f"Erreur suggestions √©v√©nements: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des suggestions: {e}")
    
    def test_gamification_functionality(self):
        """Test des fonctionnalit√©s de gamification"""
        self.print_header("Test des Fonctionnalit√©s de Gamification")
        
        # Test 1: Score social utilisateur
        try:
            response = self.session.get(f"{API_URL}/users/social-score/{self.user_id}/")
            if response.status_code == 200:
                score = response.json()
                self.print_success(f"Score social r√©cup√©r√©: {score['total_points']} points, Niveau {score['level']}")
            else:
                self.print_warning(f"Erreur score social: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration du score: {e}")
        
        # Test 2: R√©alisations utilisateur
        try:
            response = self.session.get(f"{API_URL}/users/achievements/{self.user_id}/")
            if response.status_code == 200:
                achievements = response.json()
                self.print_success(f"R√©alisations r√©cup√©r√©es ({len(achievements)} r√©alisations)")
            else:
                self.print_warning(f"Erreur r√©alisations: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des r√©alisations: {e}")
        
        # Test 3: Classement
        try:
            response = self.session.get(f"{API_URL}/users/leaderboard/?limit=10")
            if response.status_code == 200:
                leaderboard = response.json()
                self.print_success(f"Classement r√©cup√©r√© ({len(leaderboard)} utilisateurs)")
            else:
                self.print_warning(f"Erreur classement: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration du classement: {e}")
        
        # Test 4: Statistiques sociales
        try:
            response = self.session.get(f"{API_URL}/users/social-stats/{self.user_id}/")
            if response.status_code == 200:
                stats = response.json()
                self.print_success(f"Statistiques sociales r√©cup√©r√©es")
                self.print_info(f"- Amis: {stats['friends_count']}")
                self.print_info(f"- Groupes: {stats['groups_count']}")
                self.print_info(f"- √âv√©nements: {stats['events_count']}")
                self.print_info(f"- Posts: {stats['posts_count']}")
            else:
                self.print_warning(f"Erreur statistiques: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des statistiques: {e}")
    
    def test_suggestions_functionality(self):
        """Test des fonctionnalit√©s de suggestions"""
        self.print_header("Test des Fonctionnalit√©s de Suggestions")
        
        # Test 1: Suggestions de connexions
        try:
            response = self.session.get(f"{API_URL}/users/suggested-connections/")
            if response.status_code == 200:
                suggestions = response.json()
                self.print_success(f"Suggestions de connexions r√©cup√©r√©es ({len(suggestions)} suggestions)")
            else:
                self.print_warning(f"Erreur suggestions connexions: {response.status_code}")
        except Exception as e:
            self.print_error(f"Erreur lors de la r√©cup√©ration des suggestions: {e}")
    
    def run_complete_test(self):
        """Ex√©cuter tous les tests"""
        self.print_header("TEST COMPLET DES FONCTIONNALIT√âS SOCIALES AVANC√âES")
        
        # Test de connexion
        if not self.test_server_connection():
            self.print_error("Impossible de se connecter au serveur. Arr√™t des tests.")
            return False
        
        # Cr√©ation/connexion utilisateur
        if not self.create_test_user():
            self.print_error("Impossible de cr√©er/se connecter avec l'utilisateur de test. Arr√™t des tests.")
            return False
        
        # Tests des fonctionnalit√©s
        self.test_groups_functionality()
        self.test_events_functionality()
        self.test_gamification_functionality()
        self.test_suggestions_functionality()
        
        self.print_header("R√âSUM√â DES TESTS")
        self.print_success("Tests des fonctionnalit√©s sociales avanc√©es termin√©s")
        self.print_info("Fonctionnalit√©s test√©es:")
        self.print_info("- Cr√©ation et gestion de groupes communautaires")
        self.print_info("- Cr√©ation et participation aux √©v√©nements")
        self.print_info("- Syst√®me de gamification et r√©alisations")
        self.print_info("- Suggestions intelligentes")
        self.print_info("- Statistiques sociales")
        
        return True

def main():
    """Fonction principale"""
    tester = SocialFeaturesAdvancedTester()
    success = tester.run_complete_test()
    
    if success:
        print("\nüéâ TOUS LES TESTS SONT TERMIN√âS AVEC SUCC√àS !")
        print("Les fonctionnalit√©s sociales avanc√©es sont op√©rationnelles.")
    else:
        print("\n‚ùå CERTAINS TESTS ONT √âCHOU√â")
        print("V√©rifiez les erreurs ci-dessus et corrigez les probl√®mes.")

if __name__ == "__main__":
    main() 
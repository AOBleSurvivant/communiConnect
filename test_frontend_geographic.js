// Script de test pour les donn√©es g√©ographiques dans le frontend
// √Ä ex√©cuter dans la console du navigateur

console.log("üó∫Ô∏è TEST DES DONN√âES G√âOGRAPHIQUES FRONTEND");
console.log("=" * 50);

// Test de l'API g√©ographique
async function testGeographicAPI() {
    try {
        console.log("üåê Test de l'API g√©ographique...");
        
        const response = await fetch('http://localhost:8000/api/users/geographic-data/');
        console.log(`Status: ${response.status}`);
        
        if (response.ok) {
            const data = await response.json();
            console.log("‚úÖ Donn√©es g√©ographiques r√©cup√©r√©es");
            
            const regions = data.regions || [];
            console.log(`üìä R√©gions disponibles: ${regions.length}`);
            
            if (regions.length > 0) {
                const region = regions[0];
                console.log(`üèõÔ∏è Premi√®re r√©gion: ${region.nom} (${region.code})`);
                
                const prefectures = region.prefectures || [];
                if (prefectures.length > 0) {
                    const prefecture = prefectures[0];
                    console.log(`   - Pr√©fecture: ${prefecture.nom}`);
                    
                    const communes = prefecture.communes || [];
                    if (communes.length > 0) {
                        const commune = communes[0];
                        console.log(`     - Commune: ${commune.nom}`);
                        
                        const quartiers = commune.quartiers || [];
                        if (quartiers.length > 0) {
                            const quartier = quartiers[0];
                            console.log(`       - Quartier: ${quartier.nom} (ID: ${quartier.id})`);
                            console.log("‚úÖ Structure g√©ographique valide");
                        } else {
                            console.log("‚ùå Aucun quartier trouv√©");
                        }
                    } else {
                        console.log("‚ùå Aucune commune trouv√©e");
                    }
                } else {
                    console.log("‚ùå Aucune pr√©fecture trouv√©e");
                }
            } else {
                console.log("‚ùå Aucune r√©gion trouv√©e");
            }
        } else {
            console.log(`‚ùå Erreur API: ${response.status}`);
        }
    } catch (error) {
        console.log(`‚ùå Erreur: ${error.message}`);
    }
}

// Test du composant GeographicSelector
function testGeographicSelector() {
    console.log("\nüß™ Test du composant GeographicSelector...");
    
    // V√©rifier si le composant existe
    if (typeof window.GeographicSelector !== 'undefined') {
        console.log("‚úÖ Composant GeographicSelector disponible");
    } else {
        console.log("‚ö†Ô∏è Composant GeographicSelector non trouv√© (normal si pas sur la page d'inscription)");
    }
    
    // V√©rifier les donn√©es dans localStorage
    const geographicData = localStorage.getItem('geographicData');
    if (geographicData) {
        console.log("‚úÖ Donn√©es g√©ographiques en cache");
        try {
            const data = JSON.parse(geographicData);
            console.log(`   - R√©gions en cache: ${data.regions?.length || 0}`);
        } catch (e) {
            console.log("‚ùå Erreur parsing donn√©es en cache");
        }
    } else {
        console.log("‚ÑπÔ∏è Aucune donn√©e g√©ographique en cache");
    }
}

// Test de la page d'inscription
function testRegistrationPage() {
    console.log("\nüìù Test de la page d'inscription...");
    
    // V√©rifier si on est sur la page d'inscription
    if (window.location.pathname === '/register') {
        console.log("‚úÖ Sur la page d'inscription");
        
        // V√©rifier les √©l√©ments du formulaire
        const geographicElements = document.querySelectorAll('[data-geographic]');
        console.log(`   - √âl√©ments g√©ographiques trouv√©s: ${geographicElements.length}`);
        
        // V√©rifier les s√©lecteurs
        const regionSelect = document.querySelector('select[name="region"]');
        const prefectureSelect = document.querySelector('select[name="prefecture"]');
        const communeSelect = document.querySelector('select[name="commune"]');
        const quartierSelect = document.querySelector('select[name="quartier"]');
        
        console.log(`   - S√©lecteur r√©gion: ${regionSelect ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - S√©lecteur pr√©fecture: ${prefectureSelect ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - S√©lecteur commune: ${communeSelect ? '‚úÖ' : '‚ùå'}`);
        console.log(`   - S√©lecteur quartier: ${quartierSelect ? '‚úÖ' : '‚ùå'}`);
    } else {
        console.log("‚ÑπÔ∏è Pas sur la page d'inscription");
        console.log("üí° Allez sur http://localhost:3000/register pour tester");
    }
}

// Ex√©cuter les tests
async function runAllTests() {
    await testGeographicAPI();
    testGeographicSelector();
    testRegistrationPage();
    
    console.log("\nüéØ R√âSUM√â:");
    console.log("   - API g√©ographique: Test√©e");
    console.log("   - Composant frontend: V√©rifi√©");
    console.log("   - Page d'inscription: V√©rifi√©e");
    console.log("\nüí° Pour tester compl√®tement:");
    console.log("   1. Allez sur http://localhost:3000/register");
    console.log("   2. V√©rifiez que les s√©lecteurs g√©ographiques fonctionnent");
    console.log("   3. Testez l'inscription avec un quartier s√©lectionn√©");
}

// Lancer les tests
runAllTests(); 
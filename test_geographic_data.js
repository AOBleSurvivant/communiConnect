// Script de test pour diagnostiquer le probl√®me des donn√©es g√©ographiques
const axios = require('axios');

// Configuration
const API_BASE_URL = 'http://localhost:8000/api';
const FRONTEND_API_URL = 'https://communiconnect-backend.onrender.com/api';

async function testGeographicData() {
  console.log('üîç Test des donn√©es g√©ographiques...\n');

  // Test 1: API locale
  console.log('1Ô∏è‚É£ Test API locale (localhost:8000):');
  try {
    const localResponse = await axios.get(`${API_BASE_URL}/users/geographic-data/`);
    console.log('‚úÖ API locale fonctionne');
    console.log(`üìä Donn√©es re√ßues: ${localResponse.data.regions?.length || 0} r√©gions`);
    console.log(`üìä Premier quartier: ${localResponse.data.regions?.[0]?.prefectures?.[0]?.communes?.[0]?.quartiers?.[0]?.nom || 'Aucun'}`);
  } catch (error) {
    console.log('‚ùå Erreur API locale:', error.message);
  }

  console.log('\n2Ô∏è‚É£ Test API de production (Render):');
  try {
    const prodResponse = await axios.get(`${FRONTEND_API_URL}/users/geographic-data/`);
    console.log('‚úÖ API de production fonctionne');
    console.log(`üìä Donn√©es re√ßues: ${prodResponse.data.regions?.length || 0} r√©gions`);
  } catch (error) {
    console.log('‚ùå Erreur API de production:', error.message);
  }

  // Test 3: Configuration frontend
  console.log('\n3Ô∏è‚É£ Test configuration frontend:');
  console.log(`üîó URL API configur√©e: ${process.env.REACT_APP_API_URL || 'Non d√©finie'}`);
  console.log(`üîó URL par d√©faut: ${FRONTEND_API_URL}`);

  // Test 4: Simulation du composant GeographicSelector
  console.log('\n4Ô∏è‚É£ Test simulation GeographicSelector:');
  try {
    const testData = await axios.get(`${API_BASE_URL}/users/geographic-data/`);
    const regions = testData.data.regions;
    
    if (regions && regions.length > 0) {
      const firstRegion = regions[0];
      const firstPrefecture = firstRegion.prefectures?.[0];
      const firstCommune = firstPrefecture?.communes?.[0];
      const firstQuartier = firstCommune?.quartiers?.[0];
      
      console.log('‚úÖ Donn√©es disponibles:');
      console.log(`   R√©gion: ${firstRegion.nom}`);
      console.log(`   Pr√©fecture: ${firstPrefecture?.nom}`);
      console.log(`   Commune: ${firstCommune?.nom}`);
      console.log(`   Quartier: ${firstQuartier?.nom}`);
      
      // Test de s√©lection
      const selection = {
        region_id: firstRegion.id,
        prefecture_id: firstPrefecture?.id,
        commune_id: firstCommune?.id,
        quartier_id: firstQuartier?.id
      };
      
      console.log('\nüìù S√©lection test√©e:', selection);
    } else {
      console.log('‚ùå Aucune donn√©e g√©ographique disponible');
    }
  } catch (error) {
    console.log('‚ùå Erreur lors du test de s√©lection:', error.message);
  }

  // Test 5: V√©rification des CORS
  console.log('\n5Ô∏è‚É£ Test CORS:');
  try {
    const corsResponse = await axios.options(`${API_BASE_URL}/users/geographic-data/`);
    console.log('‚úÖ CORS configur√© correctement');
    console.log('üìã Headers CORS:', corsResponse.headers);
  } catch (error) {
    console.log('‚ùå Probl√®me CORS:', error.message);
  }

  console.log('\nüéØ Recommandations:');
  console.log('1. V√©rifiez que le backend est d√©marr√© sur le port 8000');
  console.log('2. V√©rifiez la configuration CORS dans Django');
  console.log('3. V√©rifiez les variables d\'environnement du frontend');
  console.log('4. Testez l\'API directement dans le navigateur');
}

// Ex√©cution du test
testGeographicData().catch(console.error); 
// Script de test pour v√©rifier la correction GeographicSelector
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:3000

console.log('üß™ Test Correction GeographicSelector - CommuniConnect');

// Fonction pour v√©rifier les composants React
function checkReactComponents() {
    console.log('üîç V√©rification des composants React...');
    
    // V√©rifier si React est disponible
    if (window.React) {
        console.log('‚úÖ React disponible');
    } else {
        console.log('‚ùå React non disponible');
        return;
    }
    
    // V√©rifier les composants sp√©cifiques
    const components = [
        'GeographicSelector',
        'CommunityAlerts',
        'CreateAlertModal'
    ];
    
    components.forEach(component => {
        if (window[component]) {
            console.log(`‚úÖ ${component} disponible`);
        } else {
            console.log(`‚ö†Ô∏è ${component} non disponible (normal si pas sur la bonne page)`);
        }
    });
}

// Fonction pour tester la navigation
function testNavigation() {
    console.log('üß™ Test de navigation...');
    
    // V√©rifier l'URL actuelle
    console.log('üìç URL actuelle:', window.location.href);
    
    // Suggestions de navigation
    const pages = [
        { name: 'Inscription', url: '/register' },
        { name: 'Alertes', url: '/alerts' },
        { name: 'Dashboard', url: '/dashboard' }
    ];
    
    console.log('üìã Pages disponibles:');
    pages.forEach(page => {
        console.log(`- ${page.name}: ${page.url}`);
    });
}

// Fonction pour v√©rifier les erreurs JavaScript
function checkJavaScriptErrors() {
    console.log('üîç V√©rification des erreurs JavaScript...');
    
    // √âcouter les erreurs futures
    window.addEventListener('error', (event) => {
        console.error('‚ùå Erreur JavaScript d√©tect√©e:', event.error);
    });
    
    // √âcouter les erreurs de promesses non g√©r√©es
    window.addEventListener('unhandledrejection', (event) => {
        console.error('‚ùå Promesse rejet√©e non g√©r√©e:', event.reason);
    });
    
    console.log('‚úÖ √âcouteurs d\'erreurs configur√©s');
}

// Fonction pour tester la g√©olocalisation
function testGeolocation() {
    console.log('üß™ Test de g√©olocalisation...');
    
    if (navigator.geolocation) {
        console.log('‚úÖ G√©olocalisation disponible');
        
        navigator.geolocation.getCurrentPosition(
            (position) => {
                console.log('‚úÖ Position obtenue:', {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                });
            },
            (error) => {
                console.log('‚ùå Erreur g√©olocalisation:', error.message);
            }
        );
    } else {
        console.log('‚ùå G√©olocalisation non disponible');
    }
}

// Fonction pour tester l'API Nominatim
async function testNominatimAPI() {
    console.log('üß™ Test API Nominatim...');
    
    try {
        const response = await fetch('https://nominatim.openstreetmap.org/reverse?format=json&lat=9.5370&lon=-13.6785&addressdetails=1');
        const data = await response.json();
        
        if (data.address) {
            console.log('‚úÖ API Nominatim fonctionne');
            console.log('üìç Adresse test√©e:', data.display_name);
        } else {
            console.log('‚ùå Erreur API Nominatim');
        }
    } catch (error) {
        console.log('‚ùå Erreur connexion API Nominatim:', error.message);
    }
}

// Fonction pour v√©rifier les props du composant
function checkComponentProps() {
    console.log('üîç V√©rification des props des composants...');
    
    // Simuler les props attendues
    const expectedProps = {
        GeographicSelector: ['onLocationSelect', 'userLocation'],
        CommunityAlerts: ['userLocation', 'alertCategories'],
        CreateAlertModal: ['onClose', 'onSubmit', 'userLocation', 'alertCategories']
    };
    
    Object.entries(expectedProps).forEach(([component, props]) => {
        console.log(`üìã ${component} - Props attendues:`, props);
    });
}

// Fonction pour tester la cr√©ation d'alerte
function testAlertCreation() {
    console.log('üß™ Test de cr√©ation d\'alerte...');
    
    // V√©rifier l'authentification
    const token = localStorage.getItem('access_token');
    if (!token) {
        console.log('‚ùå Aucun token d\'authentification');
        console.log('Ex√©cutez forceLogin() d\'abord');
        return;
    }
    
    console.log('‚úÖ Utilisateur authentifi√©');
    
    // Simuler les donn√©es d'alerte
    const alertData = {
        title: 'Test correction - Alerte',
        description: 'Test de cr√©ation d\'alerte apr√®s correction',
        category: 'other',
        latitude: 9.5370,
        longitude: -13.6785,
        address: 'Conakry, Guin√©e',
        neighborhood: 'Centre-ville',
        city: 'Conakry',
        postal_code: '00000'
    };
    
    console.log('üìù Donn√©es d\'alerte simul√©es:', alertData);
    console.log('‚úÖ Test de cr√©ation d\'alerte pr√™t');
}

// Fonction principale
function runGeographicTest() {
    console.log('üöÄ Test de correction GeographicSelector...');
    
    checkReactComponents();
    testNavigation();
    checkJavaScriptErrors();
    testGeolocation();
    testNominatimAPI();
    checkComponentProps();
    testAlertCreation();
    
    console.log('\nüìã Commandes disponibles:');
    console.log('- checkReactComponents() : V√©rifier les composants');
    console.log('- testNavigation() : Tester la navigation');
    console.log('- testGeolocation() : Tester la g√©olocalisation');
    console.log('- testNominatimAPI() : Tester l\'API Nominatim');
    console.log('- testAlertCreation() : Tester la cr√©ation d\'alerte');
}

// Ex√©cuter automatiquement
runGeographicTest(); 
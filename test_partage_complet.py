#!/usr/bin/env python
import requests
import json

# Configuration
BASE_URL = "http://127.0.0.1:8000"
API_URL = f"{BASE_URL}/api"

def test_login():
    """Test de connexion utilisateur"""
    print("üîê Test de connexion...")
    
    login_data = {
        "email": "mariam.diallo@test.gn",
        "password": "test123456"
    }
    
    response = requests.post(f"{API_URL}/users/login/", json=login_data)
    
    if response.status_code == 200:
        data = response.json()
        token = data.get('tokens', {}).get('access')
        print(f"‚úÖ Connexion r√©ussie pour mariam_diallo")
        return token
    else:
        print(f"‚ùå √âchec de connexion: {response.status_code}")
        return None

def test_get_posts_for_sharing(token):
    """R√©cup√©rer des posts pour les tests de partage"""
    print("\nüìù R√©cup√©ration des posts pour les tests de partage...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    response = requests.get(f"{API_URL}/posts/", headers=headers)
    
    if response.status_code == 200:
        data = response.json()
        posts = data.get('results', [])
        if posts:
            post_id = posts[0].get('id')
            print(f"‚úÖ Post trouv√©: ID {post_id}")
            return post_id
        else:
            print("‚ùå Aucun post disponible")
            return None
    else:
        print(f"‚ùå Erreur r√©cup√©ration posts: {response.status_code}")
        return None

def test_share_post_detailed(token, post_id):
    """Test d√©taill√© du partage de post"""
    print(f"\nüîÑ Test d√©taill√© du partage de post {post_id}...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Test avec diff√©rentes donn√©es de partage
    share_test_cases = [
        {
            "share_type": "share",
            "comment": "Post tr√®s int√©ressant !"
        },
        {
            "share_type": "like",
            "comment": "J'aime beaucoup ce post"
        },
        {
            "share_type": "recommend",
            "comment": "Je recommande ce post"
        }
    ]
    
    success_count = 0
    
    for i, share_data in enumerate(share_test_cases, 1):
        print(f"\n--- Test de partage {i} ---")
        print(f"Donn√©es: {json.dumps(share_data, indent=2)}")
        
        try:
            response = requests.post(
                f"{API_URL}/posts/posts/{post_id}/share/",
                json=share_data,
                headers=headers
            )
            
            print(f"Status: {response.status_code}")
            print(f"R√©ponse: {response.text[:200]}...")
            
            if response.status_code == 201:
                data = response.json()
                print(f"‚úÖ Partage {i} r√©ussi!")
                print(f"üîÑ Share ID: {data.get('share_id')}")
                success_count += 1
            else:
                print(f"‚ùå Erreur partage {i}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Exception partage {i}: {str(e)}")
    
    return success_count > 0

def test_external_share_detailed(token, post_id):
    """Test d√©taill√© du partage externe"""
    print(f"\nüåê Test d√©taill√© du partage externe du post {post_id}...")
    
    headers = {
        "Authorization": f"Bearer {token}",
        "Content-Type": "application/json"
    }
    
    # Test avec diff√©rentes plateformes
    platform_test_cases = [
        {"platform": "whatsapp"},
        {"platform": "facebook"},
        {"platform": "twitter"},
        {"platform": "telegram"}
    ]
    
    success_count = 0
    
    for i, platform_data in enumerate(platform_test_cases, 1):
        print(f"\n--- Test plateforme {i}: {platform_data['platform']} ---")
        
        try:
            response = requests.post(
                f"{API_URL}/posts/posts/{post_id}/share-external/",
                json=platform_data,
                headers=headers
            )
            
            print(f"Status: {response.status_code}")
            print(f"R√©ponse: {response.text[:200]}...")
            
            if response.status_code == 201:
                data = response.json()
                print(f"‚úÖ Partage externe {i} r√©ussi!")
                print(f"üåê Plateforme: {data.get('platform')}")
                success_count += 1
            else:
                print(f"‚ùå Erreur partage externe {i}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Exception partage externe {i}: {str(e)}")
    
    return success_count > 0

def test_get_shares(token, post_id):
    """Test de r√©cup√©ration des partages"""
    print(f"\nüìã Test de r√©cup√©ration des partages du post {post_id}...")
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(
            f"{API_URL}/posts/posts/{post_id}/shares/",
            headers=headers
        )
        
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text[:300]}...")
        
        if response.status_code == 200:
            data = response.json()
            shares_count = len(data.get('results', []))
            print(f"‚úÖ {shares_count} partages r√©cup√©r√©s")
            return True
        else:
            print(f"‚ùå Erreur r√©cup√©ration partages: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception lors de la r√©cup√©ration: {str(e)}")
        return False

def test_get_external_shares(token, post_id):
    """Test de r√©cup√©ration des partages externes"""
    print(f"\nüåê Test de r√©cup√©ration des partages externes du post {post_id}...")
    
    headers = {
        "Authorization": f"Bearer {token}"
    }
    
    try:
        response = requests.get(
            f"{API_URL}/posts/posts/{post_id}/external-shares/",
            headers=headers
        )
        
        print(f"Status: {response.status_code}")
        print(f"R√©ponse: {response.text[:300]}...")
        
        if response.status_code == 200:
            data = response.json()
            external_shares_count = len(data.get('results', []))
            print(f"‚úÖ {external_shares_count} partages externes r√©cup√©r√©s")
            return True
        else:
            print(f"‚ùå Erreur r√©cup√©ration partages externes: {response.status_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå Exception lors de la r√©cup√©ration: {str(e)}")
        return False

def main():
    """Test complet des fonctionnalit√©s de partage"""
    print("üöÄ TEST COMPLET DES FONCTIONNALIT√âS DE PARTAGE")
    print("=" * 60)
    
    # Test de connexion
    token = test_login()
    if not token:
        print("‚ùå Impossible de continuer sans token d'authentification")
        return
    
    # R√©cup√©rer un post pour les tests
    post_id = test_get_posts_for_sharing(token)
    if not post_id:
        print("‚ùå Impossible de continuer sans post")
        return
    
    # Test du partage de post
    share_ok = test_share_post_detailed(token, post_id)
    
    # Test du partage externe
    external_share_ok = test_external_share_detailed(token, post_id)
    
    # Test de r√©cup√©ration des partages
    get_shares_ok = test_get_shares(token, post_id)
    
    # Test de r√©cup√©ration des partages externes
    get_external_shares_ok = test_get_external_shares(token, post_id)
    
    # R√©sum√©
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â DES TESTS DE PARTAGE")
    print("=" * 60)
    print(f"üîê Authentification: {'‚úÖ' if token else '‚ùå'}")
    print(f"üìù R√©cup√©ration posts: {'‚úÖ' if post_id else '‚ùå'}")
    print(f"üîÑ Partage de post: {'‚úÖ' if share_ok else '‚ùå'}")
    print(f"üåê Partage externe: {'‚úÖ' if external_share_ok else '‚ùå'}")
    print(f"üìã R√©cup√©ration partages: {'‚úÖ' if get_shares_ok else '‚ùå'}")
    print(f"üåê R√©cup√©ration partages externes: {'‚úÖ' if get_external_shares_ok else '‚ùå'}")
    
    # Calcul du taux de r√©ussite
    tests = [token, post_id, share_ok, external_share_ok, get_shares_ok, get_external_shares_ok]
    success_count = sum(1 for test in tests if test)
    total_tests = len(tests)
    success_rate = (success_count / total_tests) * 100
    
    print(f"\nüìä TAUX DE R√âUSSITE: {success_rate:.1f}% ({success_count}/{total_tests})")
    
    if success_rate >= 90:
        print("\nüéâ EXCELLENT ! Les fonctionnalit√©s de partage fonctionnent parfaitement!")
    elif success_rate >= 80:
        print("\n‚úÖ TR√àS BIEN ! La plupart des fonctionnalit√©s de partage marchent!")
    elif success_rate >= 60:
        print("\n‚ö†Ô∏è BIEN ! Certaines fonctionnalit√©s de partage marchent.")
    else:
        print("\n‚ùå ATTENTION ! Les fonctionnalit√©s de partage ont des probl√®mes.")

if __name__ == "__main__":
    main() 
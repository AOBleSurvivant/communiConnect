#!/usr/bin/env python3
"""
Test de la fonctionnalit√© de modification des posts
"""

import requests
import json
import time
from datetime import datetime, timedelta

# Configuration
BASE_URL = "http://127.0.0.1:8000/api"
LOGIN_URL = f"{BASE_URL}/users/login/"
POSTS_URL = f"{BASE_URL}/posts/"

def test_post_editing():
    """Test de la modification des posts"""
    
    print("üß™ TEST DE MODIFICATION DES POSTS")
    print("=" * 50)
    
    # 1. Connexion utilisateur
    print("\n1. Connexion utilisateur...")
    login_data = {
        "username": "testuser",
        "password": "testpass123"
    }
    
    try:
        response = requests.post(LOGIN_URL, json=login_data)
        if response.status_code == 200:
            token = response.json().get('access')
            headers = {'Authorization': f'Bearer {token}'}
            print("‚úÖ Connexion r√©ussie")
        else:
            print(f"‚ùå √âchec de connexion: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return
    
    # 2. Cr√©er un nouveau post
    print("\n2. Cr√©ation d'un nouveau post...")
    post_data = {
        "content": "Post de test pour modification",
        "post_type": "info",
        "title": "Test modification"
    }
    
    try:
        response = requests.post(POSTS_URL, json=post_data, headers=headers)
        if response.status_code == 201:
            post = response.json()
            post_id = post['id']
            print(f"‚úÖ Post cr√©√© avec ID: {post_id}")
            print(f"   Contenu: {post['content']}")
            print(f"   Cr√©√© √†: {post['created_at']}")
        else:
            print(f"‚ùå √âchec de cr√©ation: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de cr√©ation: {e}")
        return
    
    # 3. Modifier le post imm√©diatement (dans les 30 minutes)
    print("\n3. Modification du post (dans les 30 minutes)...")
    update_data = {
        "content": "Post modifi√© avec succ√®s !",
        "post_type": "event",
        "title": "Test modifi√©"
    }
    
    try:
        response = requests.put(f"{POSTS_URL}{post_id}/", json=update_data, headers=headers)
        if response.status_code == 200:
            updated_post = response.json()
            print("‚úÖ Modification r√©ussie")
            print(f"   Nouveau contenu: {updated_post['content']}")
            print(f"   Nouveau type: {updated_post['post_type']}")
            print(f"   Modifi√© √†: {updated_post['updated_at']}")
        else:
            print(f"‚ùå √âchec de modification: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur de modification: {e}")
    
    # 4. V√©rifier que le post a √©t√© modifi√©
    print("\n4. V√©rification de la modification...")
    try:
        response = requests.get(f"{POSTS_URL}{post_id}/", headers=headers)
        if response.status_code == 200:
            post = response.json()
            print("‚úÖ Post r√©cup√©r√©")
            print(f"   Contenu actuel: {post['content']}")
            print(f"   Type actuel: {post['post_type']}")
            print(f"   Derni√®re modification: {post['updated_at']}")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de r√©cup√©ration: {e}")
    
    # 5. Test de modification apr√®s 30 minutes (simulation)
    print("\n5. Test de modification apr√®s 30 minutes...")
    print("   (Ce test simule une tentative de modification apr√®s la limite)")
    
    # Simuler un post cr√©√© il y a plus de 30 minutes
    old_post_data = {
        "content": "Post ancien pour test",
        "post_type": "info"
    }
    
    try:
        response = requests.post(POSTS_URL, json=old_post_data, headers=headers)
        if response.status_code == 201:
            old_post = response.json()
            old_post_id = old_post['id']
            print(f"   Post ancien cr√©√© avec ID: {old_post_id}")
            
            # Tenter de modifier
            old_update_data = {
                "content": "Tentative de modification apr√®s limite"
            }
            
            response = requests.put(f"{POSTS_URL}{old_post_id}/", json=old_update_data, headers=headers)
            if response.status_code == 403:
                print("‚úÖ Limite de temps respect√©e - modification refus√©e")
                print(f"   Message: {response.json().get('detail', 'Limite d√©pass√©e')}")
            else:
                print(f"‚ö†Ô∏è  Modification autoris√©e (inattendu): {response.status_code}")
        else:
            print(f"‚ùå √âchec de cr√©ation du post ancien: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test de limite: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ TEST TERMIN√â")
    print("\nFonctionnalit√©s test√©es:")
    print("‚úÖ Cr√©ation de post")
    print("‚úÖ Modification dans les 30 minutes")
    print("‚úÖ V√©rification de la modification")
    print("‚úÖ Limite de temps (30 minutes)")
    print("\nLa fonctionnalit√© de modification des posts est op√©rationnelle !")

if __name__ == "__main__":
    test_post_editing() 
#!/usr/bin/env python3
"""
Test de la fonctionnalit√© de suppression des posts
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://127.0.0.1:8000/api"
LOGIN_URL = f"{BASE_URL}/users/login/"
POSTS_URL = f"{BASE_URL}/posts/"

def test_post_deletion():
    """Test de la suppression des posts"""
    
    print("üóëÔ∏è TEST DE SUPPRESSION DES POSTS")
    print("=" * 50)
    
    # 1. Connexion utilisateur
    print("\n1. Connexion utilisateur...")
    login_data = {
        "username": "testuser",
        "password": "testpass123"
    }
    
    try:
        response = requests.post(LOGIN_URL, json=login_data)
        if response.status_code == 200:
            token = response.json().get('access')
            headers = {'Authorization': f'Bearer {token}'}
            print("‚úÖ Connexion r√©ussie")
        else:
            print(f"‚ùå √âchec de connexion: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return
    
    # 2. Cr√©er un nouveau post pour le test
    print("\n2. Cr√©ation d'un post de test...")
    post_data = {
        "content": "Post de test pour suppression",
        "post_type": "info",
        "title": "Test suppression"
    }
    
    try:
        response = requests.post(POSTS_URL, json=post_data, headers=headers)
        if response.status_code == 201:
            post = response.json()
            post_id = post['id']
            print(f"‚úÖ Post cr√©√© avec ID: {post_id}")
            print(f"   Contenu: {post['content']}")
        else:
            print(f"‚ùå √âchec de cr√©ation: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de cr√©ation: {e}")
        return
    
    # 3. V√©rifier que le post existe
    print("\n3. V√©rification de l'existence du post...")
    try:
        response = requests.get(f"{POSTS_URL}{post_id}/", headers=headers)
        if response.status_code == 200:
            post = response.json()
            print("‚úÖ Post r√©cup√©r√© avec succ√®s")
            print(f"   Contenu: {post['content']}")
        else:
            print(f"‚ùå √âchec de r√©cup√©ration: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Erreur de r√©cup√©ration: {e}")
        return
    
    # 4. Supprimer le post
    print("\n4. Suppression du post...")
    try:
        response = requests.delete(f"{POSTS_URL}{post_id}/", headers=headers)
        if response.status_code == 204:
            print("‚úÖ Post supprim√© avec succ√®s")
        else:
            print(f"‚ùå √âchec de suppression: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå Erreur de suppression: {e}")
    
    # 5. V√©rifier que le post a bien √©t√© supprim√©
    print("\n5. V√©rification de la suppression...")
    try:
        response = requests.get(f"{POSTS_URL}{post_id}/", headers=headers)
        if response.status_code == 404:
            print("‚úÖ Post correctement supprim√© (404 retourn√©)")
        else:
            print(f"‚ö†Ô∏è  Post encore accessible: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur de v√©rification: {e}")
    
    # 6. Test de suppression d'un post qui n'existe pas
    print("\n6. Test de suppression d'un post inexistant...")
    try:
        response = requests.delete(f"{POSTS_URL}99999/", headers=headers)
        if response.status_code == 404:
            print("‚úÖ Gestion correcte du post inexistant")
        else:
            print(f"‚ö†Ô∏è  R√©ponse inattendue: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Erreur lors du test: {e}")
    
    # 7. Test de suppression d'un post d'un autre utilisateur
    print("\n7. Test de suppression d'un post d'un autre utilisateur...")
    # Cr√©er un autre utilisateur ou utiliser un post existant d'un autre utilisateur
    # Ce test n√©cessiterait la cr√©ation d'un autre utilisateur
    
    print("\n" + "=" * 50)
    print("üéØ TEST TERMIN√â")
    print("\nFonctionnalit√©s test√©es:")
    print("‚úÖ Cr√©ation de post")
    print("‚úÖ Suppression de post")
    print("‚úÖ V√©rification de la suppression")
    print("‚úÖ Gestion des erreurs")
    print("\nLa fonctionnalit√© de suppression des posts est op√©rationnelle !")

if __name__ == "__main__":
    test_post_deletion() 